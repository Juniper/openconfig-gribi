// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gribi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRIBIClient is the client API for GRIBI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRIBIClient interface {
	// Modify provides a bidirectional streaming RPC that can be used to issue
	// modifications to the AFT in the form of ModifyRequest(s).
	// The network element responds (asynchronously) with a ModifyResponse
	// for each ModifyRequest indicating what action was taken, once each
	// Operation within the request has been completed.
	Modify(ctx context.Context, opts ...grpc.CallOption) (GRIBI_ModifyClient, error)
}

type gRIBIClient struct {
	cc grpc.ClientConnInterface
}

func NewGRIBIClient(cc grpc.ClientConnInterface) GRIBIClient {
	return &gRIBIClient{cc}
}

func (c *gRIBIClient) Modify(ctx context.Context, opts ...grpc.CallOption) (GRIBI_ModifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &GRIBI_ServiceDesc.Streams[0], "/gribi.v1.gRIBI/Modify", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRIBIModifyClient{stream}
	return x, nil
}

type GRIBI_ModifyClient interface {
	Send(*ModifyRequest) error
	Recv() (*ModifyResponse, error)
	grpc.ClientStream
}

type gRIBIModifyClient struct {
	grpc.ClientStream
}

func (x *gRIBIModifyClient) Send(m *ModifyRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRIBIModifyClient) Recv() (*ModifyResponse, error) {
	m := new(ModifyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRIBIServer is the server API for GRIBI service.
// All implementations must embed UnimplementedGRIBIServer
// for forward compatibility
type GRIBIServer interface {
	// Modify provides a bidirectional streaming RPC that can be used to issue
	// modifications to the AFT in the form of ModifyRequest(s).
	// The network element responds (asynchronously) with a ModifyResponse
	// for each ModifyRequest indicating what action was taken, once each
	// Operation within the request has been completed.
	Modify(GRIBI_ModifyServer) error
	mustEmbedUnimplementedGRIBIServer()
}

// UnimplementedGRIBIServer must be embedded to have forward compatible implementations.
type UnimplementedGRIBIServer struct {
}

func (UnimplementedGRIBIServer) Modify(GRIBI_ModifyServer) error {
	return status.Errorf(codes.Unimplemented, "method Modify not implemented")
}
func (UnimplementedGRIBIServer) mustEmbedUnimplementedGRIBIServer() {}

// UnsafeGRIBIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRIBIServer will
// result in compilation errors.
type UnsafeGRIBIServer interface {
	mustEmbedUnimplementedGRIBIServer()
}

func RegisterGRIBIServer(s grpc.ServiceRegistrar, srv GRIBIServer) {
	s.RegisterService(&GRIBI_ServiceDesc, srv)
}

func _GRIBI_Modify_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRIBIServer).Modify(&gRIBIModifyServer{stream})
}

type GRIBI_ModifyServer interface {
	Send(*ModifyResponse) error
	Recv() (*ModifyRequest, error)
	grpc.ServerStream
}

type gRIBIModifyServer struct {
	grpc.ServerStream
}

func (x *gRIBIModifyServer) Send(m *ModifyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRIBIModifyServer) Recv() (*ModifyRequest, error) {
	m := new(ModifyRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRIBI_ServiceDesc is the grpc.ServiceDesc for GRIBI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRIBI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gribi.v1.gRIBI",
	HandlerType: (*GRIBIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Modify",
			Handler:       _GRIBI_Modify_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/proto/service/gribi.proto",
}
