// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Package oc is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /Users/robjs/Code/go/src/github.com/openconfig/ygot/ygen/commongen.go
using the following YANG input files:
	- yang/gribi-aft.yang
Imported modules were sourced from:
	- yang/...
	- yang/deps/...
*/
package oc

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled.
func Unmarshal(data []byte, destStruct ygot.GoStruct) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree)
}

// Device represents the /device YANG schema element.
type Device struct {
	Afts	*GribiAft_Afts	`path:"afts" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts represents the /gribi-aft/afts YANG schema element.
type GribiAft_Afts struct {
	Ethernet	*GribiAft_Afts_Ethernet	`path:"ethernet" module:"gribi-aft"`
	Ipv4Unicast	*GribiAft_Afts_Ipv4Unicast	`path:"ipv4-unicast" module:"gribi-aft"`
	Ipv6Unicast	*GribiAft_Afts_Ipv6Unicast	`path:"ipv6-unicast" module:"gribi-aft"`
	Mpls	*GribiAft_Afts_Mpls	`path:"mpls" module:"gribi-aft"`
	NextHopGroups	*GribiAft_Afts_NextHopGroups	`path:"next-hop-groups" module:"gribi-aft"`
	NextHops	*GribiAft_Afts_NextHops	`path:"next-hops" module:"gribi-aft"`
	PolicyForwarding	*GribiAft_Afts_PolicyForwarding	`path:"policy-forwarding" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_Ethernet represents the /gribi-aft/afts/ethernet YANG schema element.
type GribiAft_Afts_Ethernet struct {
	MacEntry	map[string]*GribiAft_Afts_Ethernet_MacEntry	`path:"mac-entry" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_Ethernet) IsYANGGoStruct() {}


// NewMacEntry creates a new entry in the MacEntry list of the
// GribiAft_Afts_Ethernet struct. The keys of the list are populated from the input
// arguments.
func (t *GribiAft_Afts_Ethernet) NewMacEntry(MacAddress string) (*GribiAft_Afts_Ethernet_MacEntry, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MacEntry == nil {
		t.MacEntry = make(map[string]*GribiAft_Afts_Ethernet_MacEntry)
	}

	key := MacAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MacEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MacEntry", key)
	}

	t.MacEntry[key] = &GribiAft_Afts_Ethernet_MacEntry{
		MacAddress: &MacAddress,
	}

	return t.MacEntry[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_Ethernet) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_Ethernet"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_Ethernet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_Ethernet_MacEntry represents the /gribi-aft/afts/ethernet/mac-entry YANG schema element.
type GribiAft_Afts_Ethernet_MacEntry struct {
	Config	*GribiAft_Afts_Ethernet_MacEntry_Config	`path:"config" module:"gribi-aft"`
	MacAddress	*string	`path:"mac-address" module:"gribi-aft"`
	State	*GribiAft_Afts_Ethernet_MacEntry_State	`path:"state" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_Ethernet_MacEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_Ethernet_MacEntry) IsYANGGoStruct() {}


// ΛListKeyMap returns the keys of the GribiAft_Afts_Ethernet_MacEntry struct, which is a YANG list entry.
func (t *GribiAft_Afts_Ethernet_MacEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MacAddress == nil {
		return nil, fmt.Errorf("nil value for key MacAddress")
	}

	return map[string]interface{}{
		"mac-address": *t.MacAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_Ethernet_MacEntry) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_Ethernet_MacEntry"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_Ethernet_MacEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_Ethernet_MacEntry_Config represents the /gribi-aft/afts/ethernet/mac-entry/config YANG schema element.
type GribiAft_Afts_Ethernet_MacEntry_Config struct {
	MacAddress	*string	`path:"mac-address" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_Ethernet_MacEntry_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_Ethernet_MacEntry_Config) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_Ethernet_MacEntry_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_Ethernet_MacEntry_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_Ethernet_MacEntry_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_Ethernet_MacEntry_State represents the /gribi-aft/afts/ethernet/mac-entry/state YANG schema element.
type GribiAft_Afts_Ethernet_MacEntry_State struct {
	MacAddress	*string	`path:"mac-address" module:"gribi-aft"`
	NextHopGroup	*uint64	`path:"next-hop-group" module:"gribi-aft"`
	OctetsForwarded	*uint64	`path:"octets-forwarded" module:"gribi-aft"`
	PacketsForwarded	*uint64	`path:"packets-forwarded" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_Ethernet_MacEntry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_Ethernet_MacEntry_State) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_Ethernet_MacEntry_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_Ethernet_MacEntry_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_Ethernet_MacEntry_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_Ipv4Unicast represents the /gribi-aft/afts/ipv4-unicast YANG schema element.
type GribiAft_Afts_Ipv4Unicast struct {
	Ipv4Entry	map[string]*GribiAft_Afts_Ipv4Unicast_Ipv4Entry	`path:"ipv4-entry" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_Ipv4Unicast) IsYANGGoStruct() {}


// NewIpv4Entry creates a new entry in the Ipv4Entry list of the
// GribiAft_Afts_Ipv4Unicast struct. The keys of the list are populated from the input
// arguments.
func (t *GribiAft_Afts_Ipv4Unicast) NewIpv4Entry(Prefix string) (*GribiAft_Afts_Ipv4Unicast_Ipv4Entry, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4Entry == nil {
		t.Ipv4Entry = make(map[string]*GribiAft_Afts_Ipv4Unicast_Ipv4Entry)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv4Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv4Entry", key)
	}

	t.Ipv4Entry[key] = &GribiAft_Afts_Ipv4Unicast_Ipv4Entry{
		Prefix: &Prefix,
	}

	return t.Ipv4Entry[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_Ipv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_Ipv4Unicast"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_Ipv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_Ipv4Unicast_Ipv4Entry represents the /gribi-aft/afts/ipv4-unicast/ipv4-entry YANG schema element.
type GribiAft_Afts_Ipv4Unicast_Ipv4Entry struct {
	Config	*GribiAft_Afts_Ipv4Unicast_Ipv4Entry_Config	`path:"config" module:"gribi-aft"`
	Prefix	*string	`path:"prefix" module:"gribi-aft"`
	State	*GribiAft_Afts_Ipv4Unicast_Ipv4Entry_State	`path:"state" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_Ipv4Unicast_Ipv4Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_Ipv4Unicast_Ipv4Entry) IsYANGGoStruct() {}


// ΛListKeyMap returns the keys of the GribiAft_Afts_Ipv4Unicast_Ipv4Entry struct, which is a YANG list entry.
func (t *GribiAft_Afts_Ipv4Unicast_Ipv4Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_Ipv4Unicast_Ipv4Entry) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_Ipv4Unicast_Ipv4Entry"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_Ipv4Unicast_Ipv4Entry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_Ipv4Unicast_Ipv4Entry_Config represents the /gribi-aft/afts/ipv4-unicast/ipv4-entry/config YANG schema element.
type GribiAft_Afts_Ipv4Unicast_Ipv4Entry_Config struct {
	Prefix	*string	`path:"prefix" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_Ipv4Unicast_Ipv4Entry_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_Ipv4Unicast_Ipv4Entry_Config) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_Ipv4Unicast_Ipv4Entry_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_Ipv4Unicast_Ipv4Entry_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_Ipv4Unicast_Ipv4Entry_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_Ipv4Unicast_Ipv4Entry_State represents the /gribi-aft/afts/ipv4-unicast/ipv4-entry/state YANG schema element.
type GribiAft_Afts_Ipv4Unicast_Ipv4Entry_State struct {
	DecapsulateHeader	E_OpenconfigAft_EncapsulationHeaderType	`path:"decapsulate-header" module:"gribi-aft"`
	NextHopGroup	*uint64	`path:"next-hop-group" module:"gribi-aft"`
	OctetsForwarded	*uint64	`path:"octets-forwarded" module:"gribi-aft"`
	PacketsForwarded	*uint64	`path:"packets-forwarded" module:"gribi-aft"`
	Prefix	*string	`path:"prefix" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_Ipv4Unicast_Ipv4Entry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_Ipv4Unicast_Ipv4Entry_State) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_Ipv4Unicast_Ipv4Entry_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_Ipv4Unicast_Ipv4Entry_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_Ipv4Unicast_Ipv4Entry_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_Ipv6Unicast represents the /gribi-aft/afts/ipv6-unicast YANG schema element.
type GribiAft_Afts_Ipv6Unicast struct {
	Ipv6Entry	map[string]*GribiAft_Afts_Ipv6Unicast_Ipv6Entry	`path:"ipv6-entry" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_Ipv6Unicast) IsYANGGoStruct() {}


// NewIpv6Entry creates a new entry in the Ipv6Entry list of the
// GribiAft_Afts_Ipv6Unicast struct. The keys of the list are populated from the input
// arguments.
func (t *GribiAft_Afts_Ipv6Unicast) NewIpv6Entry(Prefix string) (*GribiAft_Afts_Ipv6Unicast_Ipv6Entry, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Entry == nil {
		t.Ipv6Entry = make(map[string]*GribiAft_Afts_Ipv6Unicast_Ipv6Entry)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6Entry", key)
	}

	t.Ipv6Entry[key] = &GribiAft_Afts_Ipv6Unicast_Ipv6Entry{
		Prefix: &Prefix,
	}

	return t.Ipv6Entry[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_Ipv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_Ipv6Unicast"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_Ipv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_Ipv6Unicast_Ipv6Entry represents the /gribi-aft/afts/ipv6-unicast/ipv6-entry YANG schema element.
type GribiAft_Afts_Ipv6Unicast_Ipv6Entry struct {
	Config	*GribiAft_Afts_Ipv6Unicast_Ipv6Entry_Config	`path:"config" module:"gribi-aft"`
	Prefix	*string	`path:"prefix" module:"gribi-aft"`
	State	*GribiAft_Afts_Ipv6Unicast_Ipv6Entry_State	`path:"state" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_Ipv6Unicast_Ipv6Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_Ipv6Unicast_Ipv6Entry) IsYANGGoStruct() {}


// ΛListKeyMap returns the keys of the GribiAft_Afts_Ipv6Unicast_Ipv6Entry struct, which is a YANG list entry.
func (t *GribiAft_Afts_Ipv6Unicast_Ipv6Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_Ipv6Unicast_Ipv6Entry) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_Ipv6Unicast_Ipv6Entry"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_Ipv6Unicast_Ipv6Entry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_Ipv6Unicast_Ipv6Entry_Config represents the /gribi-aft/afts/ipv6-unicast/ipv6-entry/config YANG schema element.
type GribiAft_Afts_Ipv6Unicast_Ipv6Entry_Config struct {
	Prefix	*string	`path:"prefix" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_Ipv6Unicast_Ipv6Entry_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_Ipv6Unicast_Ipv6Entry_Config) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_Ipv6Unicast_Ipv6Entry_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_Ipv6Unicast_Ipv6Entry_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_Ipv6Unicast_Ipv6Entry_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_Ipv6Unicast_Ipv6Entry_State represents the /gribi-aft/afts/ipv6-unicast/ipv6-entry/state YANG schema element.
type GribiAft_Afts_Ipv6Unicast_Ipv6Entry_State struct {
	DecapsulateHeader	E_OpenconfigAft_EncapsulationHeaderType	`path:"decapsulate-header" module:"gribi-aft"`
	NextHopGroup	*uint64	`path:"next-hop-group" module:"gribi-aft"`
	OctetsForwarded	*uint64	`path:"octets-forwarded" module:"gribi-aft"`
	PacketsForwarded	*uint64	`path:"packets-forwarded" module:"gribi-aft"`
	Prefix	*string	`path:"prefix" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_Ipv6Unicast_Ipv6Entry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_Ipv6Unicast_Ipv6Entry_State) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_Ipv6Unicast_Ipv6Entry_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_Ipv6Unicast_Ipv6Entry_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_Ipv6Unicast_Ipv6Entry_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_Mpls represents the /gribi-aft/afts/mpls YANG schema element.
type GribiAft_Afts_Mpls struct {
	LabelEntry	map[GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union]*GribiAft_Afts_Mpls_LabelEntry	`path:"label-entry" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_Mpls) IsYANGGoStruct() {}


// NewLabelEntry creates a new entry in the LabelEntry list of the
// GribiAft_Afts_Mpls struct. The keys of the list are populated from the input
// arguments.
func (t *GribiAft_Afts_Mpls) NewLabelEntry(Label GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union) (*GribiAft_Afts_Mpls_LabelEntry, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LabelEntry == nil {
		t.LabelEntry = make(map[GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union]*GribiAft_Afts_Mpls_LabelEntry)
	}

	key := Label

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LabelEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LabelEntry", key)
	}

	t.LabelEntry[key] = &GribiAft_Afts_Mpls_LabelEntry{
		Label: Label,
	}

	return t.LabelEntry[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_Mpls) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_Mpls"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_Mpls) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_Mpls_LabelEntry represents the /gribi-aft/afts/mpls/label-entry YANG schema element.
type GribiAft_Afts_Mpls_LabelEntry struct {
	Config	*GribiAft_Afts_Mpls_LabelEntry_Config	`path:"config" module:"gribi-aft"`
	Label	GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union	`path:"label" module:"gribi-aft"`
	State	*GribiAft_Afts_Mpls_LabelEntry_State	`path:"state" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_Mpls_LabelEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_Mpls_LabelEntry) IsYANGGoStruct() {}


// ΛListKeyMap returns the keys of the GribiAft_Afts_Mpls_LabelEntry struct, which is a YANG list entry.
func (t *GribiAft_Afts_Mpls_LabelEntry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"label": t.Label,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_Mpls_LabelEntry) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_Mpls_LabelEntry"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_Mpls_LabelEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union is an interface that is implemented by valid types for the union
// for the leaf /gribi-aft/afts/mpls/label-entry/label within the YANG schema.
type GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union interface {
	Is_GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union()
}

// GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union_E_GribiAft_Afts_Mpls_LabelEntry_Config_Label is used when /gribi-aft/afts/mpls/label-entry/label
// is to be set to a E_GribiAft_Afts_Mpls_LabelEntry_Config_Label value.
type GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union_E_GribiAft_Afts_Mpls_LabelEntry_Config_Label struct {
	E_GribiAft_Afts_Mpls_LabelEntry_Config_Label	E_GribiAft_Afts_Mpls_LabelEntry_Config_Label
}

// Is_GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union ensures that GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union_E_GribiAft_Afts_Mpls_LabelEntry_Config_Label
// implements the GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union interface.
func (*GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union_E_GribiAft_Afts_Mpls_LabelEntry_Config_Label) Is_GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union() {}

// GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union_Uint32 is used when /gribi-aft/afts/mpls/label-entry/label
// is to be set to a uint32 value.
type GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union_Uint32 struct {
	Uint32	uint32
}

// Is_GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union ensures that GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union_Uint32
// implements the GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union interface.
func (*GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union_Uint32) Is_GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union() {}

// To_GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union takes an input interface{} and attempts to convert it to a struct
// which implements the GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *GribiAft_Afts_Mpls_LabelEntry) To_GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union(i interface{}) (GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union, error) {
	switch v := i.(type) {
	case E_GribiAft_Afts_Mpls_LabelEntry_Config_Label:
		return &GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union_E_GribiAft_Afts_Mpls_LabelEntry_Config_Label{v}, nil
	case uint32:
		return &GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union, unknown union type, got: %T, want any of [E_GribiAft_Afts_Mpls_LabelEntry_Config_Label, uint32]", i, i)
	}
}


// GribiAft_Afts_Mpls_LabelEntry_Config represents the /gribi-aft/afts/mpls/label-entry/config YANG schema element.
type GribiAft_Afts_Mpls_LabelEntry_Config struct {
	Label	GribiAft_Afts_Mpls_LabelEntry_Config_Label_Union	`path:"label" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_Mpls_LabelEntry_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_Mpls_LabelEntry_Config) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_Mpls_LabelEntry_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_Mpls_LabelEntry_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_Mpls_LabelEntry_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_Mpls_LabelEntry_State represents the /gribi-aft/afts/mpls/label-entry/state YANG schema element.
type GribiAft_Afts_Mpls_LabelEntry_State struct {
	Label	GribiAft_Afts_Mpls_LabelEntry_State_Label_Union	`path:"label" module:"gribi-aft"`
	NextHopGroup	*uint64	`path:"next-hop-group" module:"gribi-aft"`
	OctetsForwarded	*uint64	`path:"octets-forwarded" module:"gribi-aft"`
	PacketsForwarded	*uint64	`path:"packets-forwarded" module:"gribi-aft"`
	PoppedMplsLabelStack	[]GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union	`path:"popped-mpls-label-stack" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_Mpls_LabelEntry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_Mpls_LabelEntry_State) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_Mpls_LabelEntry_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_Mpls_LabelEntry_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_Mpls_LabelEntry_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_Mpls_LabelEntry_State_Label_Union is an interface that is implemented by valid types for the union
// for the leaf /gribi-aft/afts/mpls/label-entry/state/label within the YANG schema.
type GribiAft_Afts_Mpls_LabelEntry_State_Label_Union interface {
	Is_GribiAft_Afts_Mpls_LabelEntry_State_Label_Union()
}

// GribiAft_Afts_Mpls_LabelEntry_State_Label_Union_E_GribiAft_Afts_Mpls_LabelEntry_Config_Label is used when /gribi-aft/afts/mpls/label-entry/state/label
// is to be set to a E_GribiAft_Afts_Mpls_LabelEntry_Config_Label value.
type GribiAft_Afts_Mpls_LabelEntry_State_Label_Union_E_GribiAft_Afts_Mpls_LabelEntry_Config_Label struct {
	E_GribiAft_Afts_Mpls_LabelEntry_Config_Label	E_GribiAft_Afts_Mpls_LabelEntry_Config_Label
}

// Is_GribiAft_Afts_Mpls_LabelEntry_State_Label_Union ensures that GribiAft_Afts_Mpls_LabelEntry_State_Label_Union_E_GribiAft_Afts_Mpls_LabelEntry_Config_Label
// implements the GribiAft_Afts_Mpls_LabelEntry_State_Label_Union interface.
func (*GribiAft_Afts_Mpls_LabelEntry_State_Label_Union_E_GribiAft_Afts_Mpls_LabelEntry_Config_Label) Is_GribiAft_Afts_Mpls_LabelEntry_State_Label_Union() {}

// GribiAft_Afts_Mpls_LabelEntry_State_Label_Union_Uint32 is used when /gribi-aft/afts/mpls/label-entry/state/label
// is to be set to a uint32 value.
type GribiAft_Afts_Mpls_LabelEntry_State_Label_Union_Uint32 struct {
	Uint32	uint32
}

// Is_GribiAft_Afts_Mpls_LabelEntry_State_Label_Union ensures that GribiAft_Afts_Mpls_LabelEntry_State_Label_Union_Uint32
// implements the GribiAft_Afts_Mpls_LabelEntry_State_Label_Union interface.
func (*GribiAft_Afts_Mpls_LabelEntry_State_Label_Union_Uint32) Is_GribiAft_Afts_Mpls_LabelEntry_State_Label_Union() {}

// To_GribiAft_Afts_Mpls_LabelEntry_State_Label_Union takes an input interface{} and attempts to convert it to a struct
// which implements the GribiAft_Afts_Mpls_LabelEntry_State_Label_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *GribiAft_Afts_Mpls_LabelEntry_State) To_GribiAft_Afts_Mpls_LabelEntry_State_Label_Union(i interface{}) (GribiAft_Afts_Mpls_LabelEntry_State_Label_Union, error) {
	switch v := i.(type) {
	case E_GribiAft_Afts_Mpls_LabelEntry_Config_Label:
		return &GribiAft_Afts_Mpls_LabelEntry_State_Label_Union_E_GribiAft_Afts_Mpls_LabelEntry_Config_Label{v}, nil
	case uint32:
		return &GribiAft_Afts_Mpls_LabelEntry_State_Label_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to GribiAft_Afts_Mpls_LabelEntry_State_Label_Union, unknown union type, got: %T, want any of [E_GribiAft_Afts_Mpls_LabelEntry_Config_Label, uint32]", i, i)
	}
}

// GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union is an interface that is implemented by valid types for the union
// for the leaf /gribi-aft/afts/mpls/label-entry/state/popped-mpls-label-stack within the YANG schema.
type GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union interface {
	Is_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union()
}

// GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union_E_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack is used when /gribi-aft/afts/mpls/label-entry/state/popped-mpls-label-stack
// is to be set to a E_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack value.
type GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union_E_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack struct {
	E_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack	E_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack
}

// Is_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union ensures that GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union_E_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack
// implements the GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union interface.
func (*GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union_E_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack) Is_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union() {}

// GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union_Uint32 is used when /gribi-aft/afts/mpls/label-entry/state/popped-mpls-label-stack
// is to be set to a uint32 value.
type GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union_Uint32 struct {
	Uint32	uint32
}

// Is_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union ensures that GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union_Uint32
// implements the GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union interface.
func (*GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union_Uint32) Is_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union() {}

// To_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union takes an input interface{} and attempts to convert it to a struct
// which implements the GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *GribiAft_Afts_Mpls_LabelEntry_State) To_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union(i interface{}) (GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union, error) {
	switch v := i.(type) {
	case E_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack:
		return &GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union_E_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack{v}, nil
	case uint32:
		return &GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union, unknown union type, got: %T, want any of [E_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack, uint32]", i, i)
	}
}


// GribiAft_Afts_NextHopGroups represents the /gribi-aft/afts/next-hop-groups YANG schema element.
type GribiAft_Afts_NextHopGroups struct {
	NextHopGroup	map[uint64]*GribiAft_Afts_NextHopGroups_NextHopGroup	`path:"next-hop-group" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_NextHopGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_NextHopGroups) IsYANGGoStruct() {}


// NewNextHopGroup creates a new entry in the NextHopGroup list of the
// GribiAft_Afts_NextHopGroups struct. The keys of the list are populated from the input
// arguments.
func (t *GribiAft_Afts_NextHopGroups) NewNextHopGroup(Id uint64) (*GribiAft_Afts_NextHopGroups_NextHopGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHopGroup == nil {
		t.NextHopGroup = make(map[uint64]*GribiAft_Afts_NextHopGroups_NextHopGroup)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHopGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHopGroup", key)
	}

	t.NextHopGroup[key] = &GribiAft_Afts_NextHopGroups_NextHopGroup{
		Id: &Id,
	}

	return t.NextHopGroup[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_NextHopGroups) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_NextHopGroups"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_NextHopGroups) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_NextHopGroups_NextHopGroup represents the /gribi-aft/afts/next-hop-groups/next-hop-group YANG schema element.
type GribiAft_Afts_NextHopGroups_NextHopGroup struct {
	Config	*GribiAft_Afts_NextHopGroups_NextHopGroup_Config	`path:"config" module:"gribi-aft"`
	Id	*uint64	`path:"id" module:"gribi-aft"`
	NextHops	*GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops	`path:"next-hops" module:"gribi-aft"`
	State	*GribiAft_Afts_NextHopGroups_NextHopGroup_State	`path:"state" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_NextHopGroups_NextHopGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_NextHopGroups_NextHopGroup) IsYANGGoStruct() {}


// ΛListKeyMap returns the keys of the GribiAft_Afts_NextHopGroups_NextHopGroup struct, which is a YANG list entry.
func (t *GribiAft_Afts_NextHopGroups_NextHopGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_NextHopGroups_NextHopGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_NextHopGroups_NextHopGroup"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_NextHopGroups_NextHopGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_NextHopGroups_NextHopGroup_Config represents the /gribi-aft/afts/next-hop-groups/next-hop-group/config YANG schema element.
type GribiAft_Afts_NextHopGroups_NextHopGroup_Config struct {
	Id	*uint64	`path:"id" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_NextHopGroups_NextHopGroup_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_NextHopGroups_NextHopGroup_Config) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_NextHopGroups_NextHopGroup_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_NextHopGroups_NextHopGroup_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_NextHopGroups_NextHopGroup_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops represents the /gribi-aft/afts/next-hop-groups/next-hop-group/next-hops YANG schema element.
type GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops struct {
	NextHop	map[uint64]*GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop	`path:"next-hop" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops) IsYANGGoStruct() {}


// NewNextHop creates a new entry in the NextHop list of the
// GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops struct. The keys of the list are populated from the input
// arguments.
func (t *GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops) NewNextHop(Index uint64) (*GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop{
		Index: &Index,
	}

	return t.NextHop[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop represents the /gribi-aft/afts/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop struct {
	Config	*GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_Config	`path:"config" module:"gribi-aft"`
	Index	*uint64	`path:"index" module:"gribi-aft"`
	State	*GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_State	`path:"state" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop) IsYANGGoStruct() {}


// ΛListKeyMap returns the keys of the GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop struct, which is a YANG list entry.
func (t *GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_Config represents the /gribi-aft/afts/next-hop-groups/next-hop-group/next-hops/next-hop/config YANG schema element.
type GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_Config struct {
	Index	*uint64	`path:"index" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_Config) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_State represents the /gribi-aft/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state YANG schema element.
type GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_State struct {
	Index	*uint64	`path:"index" module:"gribi-aft"`
	Weight	*uint64	`path:"weight" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_State) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_NextHopGroups_NextHopGroup_State represents the /gribi-aft/afts/next-hop-groups/next-hop-group/state YANG schema element.
type GribiAft_Afts_NextHopGroups_NextHopGroup_State struct {
	BackupNextHopGroup	*uint64	`path:"backup-next-hop-group" module:"gribi-aft"`
	Color	*uint64	`path:"color" module:"gribi-aft"`
	Id	*uint64	`path:"id" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_NextHopGroups_NextHopGroup_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_NextHopGroups_NextHopGroup_State) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_NextHopGroups_NextHopGroup_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_NextHopGroups_NextHopGroup_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_NextHopGroups_NextHopGroup_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_NextHops represents the /gribi-aft/afts/next-hops YANG schema element.
type GribiAft_Afts_NextHops struct {
	NextHop	map[uint64]*GribiAft_Afts_NextHops_NextHop	`path:"next-hop" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_NextHops) IsYANGGoStruct() {}


// NewNextHop creates a new entry in the NextHop list of the
// GribiAft_Afts_NextHops struct. The keys of the list are populated from the input
// arguments.
func (t *GribiAft_Afts_NextHops) NewNextHop(Index uint64) (*GribiAft_Afts_NextHops_NextHop, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*GribiAft_Afts_NextHops_NextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &GribiAft_Afts_NextHops_NextHop{
		Index: &Index,
	}

	return t.NextHop[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_NextHops) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_NextHops"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_NextHops) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_NextHops_NextHop represents the /gribi-aft/afts/next-hops/next-hop YANG schema element.
type GribiAft_Afts_NextHops_NextHop struct {
	Config	*GribiAft_Afts_NextHops_NextHop_Config	`path:"config" module:"gribi-aft"`
	Index	*uint64	`path:"index" module:"gribi-aft"`
	InterfaceRef	*GribiAft_Afts_NextHops_NextHop_InterfaceRef	`path:"interface-ref" module:"gribi-aft"`
	State	*GribiAft_Afts_NextHops_NextHop_State	`path:"state" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_NextHops_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_NextHops_NextHop) IsYANGGoStruct() {}


// ΛListKeyMap returns the keys of the GribiAft_Afts_NextHops_NextHop struct, which is a YANG list entry.
func (t *GribiAft_Afts_NextHops_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_NextHops_NextHop) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_NextHops_NextHop"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_NextHops_NextHop) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_NextHops_NextHop_Config represents the /gribi-aft/afts/next-hops/next-hop/config YANG schema element.
type GribiAft_Afts_NextHops_NextHop_Config struct {
	Index	*uint64	`path:"index" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_NextHops_NextHop_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_NextHops_NextHop_Config) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_NextHops_NextHop_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_NextHops_NextHop_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_NextHops_NextHop_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_NextHops_NextHop_InterfaceRef represents the /gribi-aft/afts/next-hops/next-hop/interface-ref YANG schema element.
type GribiAft_Afts_NextHops_NextHop_InterfaceRef struct {
	Config	*GribiAft_Afts_NextHops_NextHop_InterfaceRef_Config	`path:"config" module:"gribi-aft"`
	State	*GribiAft_Afts_NextHops_NextHop_InterfaceRef_State	`path:"state" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_NextHops_NextHop_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_NextHops_NextHop_InterfaceRef) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_NextHops_NextHop_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_NextHops_NextHop_InterfaceRef"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_NextHops_NextHop_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_NextHops_NextHop_InterfaceRef_Config represents the /gribi-aft/afts/next-hops/next-hop/interface-ref/config YANG schema element.
type GribiAft_Afts_NextHops_NextHop_InterfaceRef_Config struct {
	Interface	*string	`path:"interface" module:"gribi-aft"`
	Subinterface	*uint32	`path:"subinterface" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_NextHops_NextHop_InterfaceRef_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_NextHops_NextHop_InterfaceRef_Config) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_NextHops_NextHop_InterfaceRef_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_NextHops_NextHop_InterfaceRef_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_NextHops_NextHop_InterfaceRef_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_NextHops_NextHop_InterfaceRef_State represents the /gribi-aft/afts/next-hops/next-hop/interface-ref/state YANG schema element.
type GribiAft_Afts_NextHops_NextHop_InterfaceRef_State struct {
	Interface	*string	`path:"interface" module:"gribi-aft"`
	Subinterface	*uint32	`path:"subinterface" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_NextHops_NextHop_InterfaceRef_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_NextHops_NextHop_InterfaceRef_State) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_NextHops_NextHop_InterfaceRef_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_NextHops_NextHop_InterfaceRef_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_NextHops_NextHop_InterfaceRef_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_NextHops_NextHop_State represents the /gribi-aft/afts/next-hops/next-hop/state YANG schema element.
type GribiAft_Afts_NextHops_NextHop_State struct {
	EncapsulateHeader	E_OpenconfigAft_EncapsulationHeaderType	`path:"encapsulate-header" module:"gribi-aft"`
	Index	*uint64	`path:"index" module:"gribi-aft"`
	IpAddress	*string	`path:"ip-address" module:"gribi-aft"`
	MacAddress	*string	`path:"mac-address" module:"gribi-aft"`
	OriginProtocol	E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE	`path:"origin-protocol" module:"gribi-aft"`
	PushedMplsLabelStack	[]GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union	`path:"pushed-mpls-label-stack" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_NextHops_NextHop_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_NextHops_NextHop_State) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_NextHops_NextHop_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_NextHops_NextHop_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_NextHops_NextHop_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union is an interface that is implemented by valid types for the union
// for the leaf /gribi-aft/afts/next-hops/next-hop/state/pushed-mpls-label-stack within the YANG schema.
type GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union interface {
	Is_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union()
}

// GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union_E_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack is used when /gribi-aft/afts/next-hops/next-hop/state/pushed-mpls-label-stack
// is to be set to a E_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack value.
type GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union_E_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack struct {
	E_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack	E_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack
}

// Is_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union ensures that GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union_E_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack
// implements the GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union interface.
func (*GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union_E_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack) Is_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union() {}

// GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union_Uint32 is used when /gribi-aft/afts/next-hops/next-hop/state/pushed-mpls-label-stack
// is to be set to a uint32 value.
type GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union_Uint32 struct {
	Uint32	uint32
}

// Is_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union ensures that GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union_Uint32
// implements the GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union interface.
func (*GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union_Uint32) Is_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union() {}

// To_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union takes an input interface{} and attempts to convert it to a struct
// which implements the GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *GribiAft_Afts_NextHops_NextHop_State) To_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union(i interface{}) (GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union, error) {
	switch v := i.(type) {
	case E_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack:
		return &GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union_E_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack{v}, nil
	case uint32:
		return &GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union, unknown union type, got: %T, want any of [E_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack, uint32]", i, i)
	}
}


// GribiAft_Afts_PolicyForwarding represents the /gribi-aft/afts/policy-forwarding YANG schema element.
type GribiAft_Afts_PolicyForwarding struct {
	PolicyForwardingEntry	map[uint64]*GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry	`path:"policy-forwarding-entry" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_PolicyForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_PolicyForwarding) IsYANGGoStruct() {}


// NewPolicyForwardingEntry creates a new entry in the PolicyForwardingEntry list of the
// GribiAft_Afts_PolicyForwarding struct. The keys of the list are populated from the input
// arguments.
func (t *GribiAft_Afts_PolicyForwarding) NewPolicyForwardingEntry(Index uint64) (*GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyForwardingEntry == nil {
		t.PolicyForwardingEntry = make(map[uint64]*GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicyForwardingEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicyForwardingEntry", key)
	}

	t.PolicyForwardingEntry[key] = &GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry{
		Index: &Index,
	}

	return t.PolicyForwardingEntry[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_PolicyForwarding) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_PolicyForwarding"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_PolicyForwarding) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry represents the /gribi-aft/afts/policy-forwarding/policy-forwarding-entry YANG schema element.
type GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry struct {
	Config	*GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config	`path:"config" module:"gribi-aft"`
	Index	*uint64	`path:"index" module:"gribi-aft"`
	State	*GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State	`path:"state" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry) IsYANGGoStruct() {}


// ΛListKeyMap returns the keys of the GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry struct, which is a YANG list entry.
func (t *GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config represents the /gribi-aft/afts/policy-forwarding/policy-forwarding-entry/config YANG schema element.
type GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config struct {
	Index	*uint64	`path:"index" module:"gribi-aft"`
	IpDscp	*uint8	`path:"ip-dscp" module:"gribi-aft"`
	IpPrefix	*string	`path:"ip-prefix" module:"gribi-aft"`
	IpProtocol	GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union	`path:"ip-protocol" module:"gribi-aft"`
	L4DstPort	*uint16	`path:"l4-dst-port" module:"gribi-aft"`
	L4SrcPort	*uint16	`path:"l4-src-port" module:"gribi-aft"`
	MacAddress	*string	`path:"mac-address" module:"gribi-aft"`
	MplsLabel	GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union	`path:"mpls-label" module:"gribi-aft"`
	MplsTc	*uint8	`path:"mpls-tc" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union is an interface that is implemented by valid types for the union
// for the leaf /gribi-aft/afts/policy-forwarding/policy-forwarding-entry/config/ip-protocol within the YANG schema.
type GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union interface {
	Is_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union()
}

// GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL is used when /gribi-aft/afts/policy-forwarding/policy-forwarding-entry/config/ip-protocol
// is to be set to a E_OpenconfigPacketMatchTypes_IP_PROTOCOL value.
type GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL struct {
	E_OpenconfigPacketMatchTypes_IP_PROTOCOL	E_OpenconfigPacketMatchTypes_IP_PROTOCOL
}

// Is_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union ensures that GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL
// implements the GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union interface.
func (*GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL) Is_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union() {}

// GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union_Uint8 is used when /gribi-aft/afts/policy-forwarding/policy-forwarding-entry/config/ip-protocol
// is to be set to a uint8 value.
type GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union_Uint8 struct {
	Uint8	uint8
}

// Is_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union ensures that GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union_Uint8
// implements the GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union interface.
func (*GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union_Uint8) Is_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union() {}

// To_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config) To_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union(i interface{}) (GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPacketMatchTypes_IP_PROTOCOL:
		return &GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL{v}, nil
	case uint8:
		return &GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_IpProtocol_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, uint8]", i, i)
	}
}

// GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /gribi-aft/afts/policy-forwarding/policy-forwarding-entry/config/mpls-label within the YANG schema.
type GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union interface {
	Is_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union()
}

// GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union_E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel is used when /gribi-aft/afts/policy-forwarding/policy-forwarding-entry/config/mpls-label
// is to be set to a E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel value.
type GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union_E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel struct {
	E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel	E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel
}

// Is_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union ensures that GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union_E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel
// implements the GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union interface.
func (*GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union_E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel) Is_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union() {}

// GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union_Uint32 is used when /gribi-aft/afts/policy-forwarding/policy-forwarding-entry/config/mpls-label
// is to be set to a uint32 value.
type GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union_Uint32 struct {
	Uint32	uint32
}

// Is_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union ensures that GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union_Uint32
// implements the GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union interface.
func (*GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union_Uint32) Is_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union() {}

// To_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config) To_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union(i interface{}) (GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union, error) {
	switch v := i.(type) {
	case E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel:
		return &GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union_E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel{v}, nil
	case uint32:
		return &GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_Union, unknown union type, got: %T, want any of [E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel, uint32]", i, i)
	}
}


// GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State represents the /gribi-aft/afts/policy-forwarding/policy-forwarding-entry/state YANG schema element.
type GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State struct {
	Index	*uint64	`path:"index" module:"gribi-aft"`
	IpDscp	*uint8	`path:"ip-dscp" module:"gribi-aft"`
	IpPrefix	*string	`path:"ip-prefix" module:"gribi-aft"`
	IpProtocol	GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union	`path:"ip-protocol" module:"gribi-aft"`
	L4DstPort	*uint16	`path:"l4-dst-port" module:"gribi-aft"`
	L4SrcPort	*uint16	`path:"l4-src-port" module:"gribi-aft"`
	MacAddress	*string	`path:"mac-address" module:"gribi-aft"`
	MplsLabel	GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union	`path:"mpls-label" module:"gribi-aft"`
	MplsTc	*uint8	`path:"mpls-tc" module:"gribi-aft"`
	NextHopGroup	*uint64	`path:"next-hop-group" module:"gribi-aft"`
	OctetsForwarded	*uint64	`path:"octets-forwarded" module:"gribi-aft"`
	PacketsForwarded	*uint64	`path:"packets-forwarded" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union is an interface that is implemented by valid types for the union
// for the leaf /gribi-aft/afts/policy-forwarding/policy-forwarding-entry/state/ip-protocol within the YANG schema.
type GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union interface {
	Is_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union()
}

// GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL is used when /gribi-aft/afts/policy-forwarding/policy-forwarding-entry/state/ip-protocol
// is to be set to a E_OpenconfigPacketMatchTypes_IP_PROTOCOL value.
type GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL struct {
	E_OpenconfigPacketMatchTypes_IP_PROTOCOL	E_OpenconfigPacketMatchTypes_IP_PROTOCOL
}

// Is_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union ensures that GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL
// implements the GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union interface.
func (*GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL) Is_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union() {}

// GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union_Uint8 is used when /gribi-aft/afts/policy-forwarding/policy-forwarding-entry/state/ip-protocol
// is to be set to a uint8 value.
type GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union_Uint8 struct {
	Uint8	uint8
}

// Is_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union ensures that GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union_Uint8
// implements the GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union interface.
func (*GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union_Uint8) Is_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union() {}

// To_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State) To_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union(i interface{}) (GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPacketMatchTypes_IP_PROTOCOL:
		return &GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL{v}, nil
	case uint8:
		return &GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, uint8]", i, i)
	}
}

// GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /gribi-aft/afts/policy-forwarding/policy-forwarding-entry/state/mpls-label within the YANG schema.
type GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union interface {
	Is_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union()
}

// GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union_E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel is used when /gribi-aft/afts/policy-forwarding/policy-forwarding-entry/state/mpls-label
// is to be set to a E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel value.
type GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union_E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel struct {
	E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel	E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel
}

// Is_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union ensures that GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union_E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel
// implements the GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union interface.
func (*GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union_E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel) Is_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union() {}

// GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union_Uint32 is used when /gribi-aft/afts/policy-forwarding/policy-forwarding-entry/state/mpls-label
// is to be set to a uint32 value.
type GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union_Uint32 struct {
	Uint32	uint32
}

// Is_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union ensures that GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union_Uint32
// implements the GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union interface.
func (*GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union_Uint32) Is_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union() {}

// To_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State) To_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union(i interface{}) (GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union, error) {
	switch v := i.(type) {
	case E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel:
		return &GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union_E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel{v}, nil
	case uint32:
		return &GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union, unknown union type, got: %T, want any of [E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel, uint32]", i, i)
	}
}


// E_GribiAft_Afts_Mpls_LabelEntry_Config_Label is a derived int64 type which is used to represent
// the enumerated node GribiAft_Afts_Mpls_LabelEntry_Config_Label. An additional value named
// GribiAft_Afts_Mpls_LabelEntry_Config_Label_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_GribiAft_Afts_Mpls_LabelEntry_Config_Label int64

// IsYANGGoEnum ensures that GribiAft_Afts_Mpls_LabelEntry_Config_Label implements the yang.GoEnum
// interface. This ensures that GribiAft_Afts_Mpls_LabelEntry_Config_Label can be identified as a
// mapped type for a YANG enumeration.
func (E_GribiAft_Afts_Mpls_LabelEntry_Config_Label) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  GribiAft_Afts_Mpls_LabelEntry_Config_Label.
func (E_GribiAft_Afts_Mpls_LabelEntry_Config_Label) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// GribiAft_Afts_Mpls_LabelEntry_Config_Label_UNSET corresponds to the value UNSET of GribiAft_Afts_Mpls_LabelEntry_Config_Label
	GribiAft_Afts_Mpls_LabelEntry_Config_Label_UNSET E_GribiAft_Afts_Mpls_LabelEntry_Config_Label = 0
	// GribiAft_Afts_Mpls_LabelEntry_Config_Label_IPV4_EXPLICIT_NULL corresponds to the value IPV4_EXPLICIT_NULL of GribiAft_Afts_Mpls_LabelEntry_Config_Label
	GribiAft_Afts_Mpls_LabelEntry_Config_Label_IPV4_EXPLICIT_NULL E_GribiAft_Afts_Mpls_LabelEntry_Config_Label = 1
	// GribiAft_Afts_Mpls_LabelEntry_Config_Label_ROUTER_ALERT corresponds to the value ROUTER_ALERT of GribiAft_Afts_Mpls_LabelEntry_Config_Label
	GribiAft_Afts_Mpls_LabelEntry_Config_Label_ROUTER_ALERT E_GribiAft_Afts_Mpls_LabelEntry_Config_Label = 2
	// GribiAft_Afts_Mpls_LabelEntry_Config_Label_IPV6_EXPLICIT_NULL corresponds to the value IPV6_EXPLICIT_NULL of GribiAft_Afts_Mpls_LabelEntry_Config_Label
	GribiAft_Afts_Mpls_LabelEntry_Config_Label_IPV6_EXPLICIT_NULL E_GribiAft_Afts_Mpls_LabelEntry_Config_Label = 3
	// GribiAft_Afts_Mpls_LabelEntry_Config_Label_IMPLICIT_NULL corresponds to the value IMPLICIT_NULL of GribiAft_Afts_Mpls_LabelEntry_Config_Label
	GribiAft_Afts_Mpls_LabelEntry_Config_Label_IMPLICIT_NULL E_GribiAft_Afts_Mpls_LabelEntry_Config_Label = 4
	// GribiAft_Afts_Mpls_LabelEntry_Config_Label_ENTROPY_LABEL_INDICATOR corresponds to the value ENTROPY_LABEL_INDICATOR of GribiAft_Afts_Mpls_LabelEntry_Config_Label
	GribiAft_Afts_Mpls_LabelEntry_Config_Label_ENTROPY_LABEL_INDICATOR E_GribiAft_Afts_Mpls_LabelEntry_Config_Label = 8
	// GribiAft_Afts_Mpls_LabelEntry_Config_Label_NO_LABEL corresponds to the value NO_LABEL of GribiAft_Afts_Mpls_LabelEntry_Config_Label
	GribiAft_Afts_Mpls_LabelEntry_Config_Label_NO_LABEL E_GribiAft_Afts_Mpls_LabelEntry_Config_Label = 9
)


// E_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack is a derived int64 type which is used to represent
// the enumerated node GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack. An additional value named
// GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack int64

// IsYANGGoEnum ensures that GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack implements the yang.GoEnum
// interface. This ensures that GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack can be identified as a
// mapped type for a YANG enumeration.
func (E_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack.
func (E_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_UNSET corresponds to the value UNSET of GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack
	GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_UNSET E_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack = 0
	// GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_IPV4_EXPLICIT_NULL corresponds to the value IPV4_EXPLICIT_NULL of GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack
	GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_IPV4_EXPLICIT_NULL E_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack = 1
	// GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_ROUTER_ALERT corresponds to the value ROUTER_ALERT of GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack
	GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_ROUTER_ALERT E_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack = 2
	// GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_IPV6_EXPLICIT_NULL corresponds to the value IPV6_EXPLICIT_NULL of GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack
	GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_IPV6_EXPLICIT_NULL E_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack = 3
	// GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_IMPLICIT_NULL corresponds to the value IMPLICIT_NULL of GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack
	GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_IMPLICIT_NULL E_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack = 4
	// GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_ENTROPY_LABEL_INDICATOR corresponds to the value ENTROPY_LABEL_INDICATOR of GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack
	GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_ENTROPY_LABEL_INDICATOR E_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack = 8
	// GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_NO_LABEL corresponds to the value NO_LABEL of GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack
	GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_NO_LABEL E_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack = 9
)


// E_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack is a derived int64 type which is used to represent
// the enumerated node GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack. An additional value named
// GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack int64

// IsYANGGoEnum ensures that GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack implements the yang.GoEnum
// interface. This ensures that GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack can be identified as a
// mapped type for a YANG enumeration.
func (E_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack.
func (E_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_UNSET corresponds to the value UNSET of GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack
	GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_UNSET E_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack = 0
	// GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_IPV4_EXPLICIT_NULL corresponds to the value IPV4_EXPLICIT_NULL of GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack
	GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_IPV4_EXPLICIT_NULL E_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack = 1
	// GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_ROUTER_ALERT corresponds to the value ROUTER_ALERT of GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack
	GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_ROUTER_ALERT E_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack = 2
	// GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_IPV6_EXPLICIT_NULL corresponds to the value IPV6_EXPLICIT_NULL of GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack
	GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_IPV6_EXPLICIT_NULL E_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack = 3
	// GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_IMPLICIT_NULL corresponds to the value IMPLICIT_NULL of GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack
	GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_IMPLICIT_NULL E_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack = 4
	// GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_ENTROPY_LABEL_INDICATOR corresponds to the value ENTROPY_LABEL_INDICATOR of GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack
	GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_ENTROPY_LABEL_INDICATOR E_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack = 8
	// GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_NO_LABEL corresponds to the value NO_LABEL of GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack
	GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack_NO_LABEL E_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack = 9
)


// E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel is a derived int64 type which is used to represent
// the enumerated node GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel. An additional value named
// GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel int64

// IsYANGGoEnum ensures that GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel implements the yang.GoEnum
// interface. This ensures that GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel can be identified as a
// mapped type for a YANG enumeration.
func (E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel.
func (E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_UNSET corresponds to the value UNSET of GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel
	GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_UNSET E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel = 0
	// GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_IPV4_EXPLICIT_NULL corresponds to the value IPV4_EXPLICIT_NULL of GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel
	GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_IPV4_EXPLICIT_NULL E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel = 1
	// GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_ROUTER_ALERT corresponds to the value ROUTER_ALERT of GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel
	GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_ROUTER_ALERT E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel = 2
	// GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_IPV6_EXPLICIT_NULL corresponds to the value IPV6_EXPLICIT_NULL of GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel
	GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_IPV6_EXPLICIT_NULL E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel = 3
	// GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_IMPLICIT_NULL corresponds to the value IMPLICIT_NULL of GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel
	GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_IMPLICIT_NULL E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel = 4
	// GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_ENTROPY_LABEL_INDICATOR corresponds to the value ENTROPY_LABEL_INDICATOR of GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel
	GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_ENTROPY_LABEL_INDICATOR E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel = 8
	// GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_NO_LABEL corresponds to the value NO_LABEL of GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel
	GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel_NO_LABEL E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel = 9
)


// E_OpenconfigAft_EncapsulationHeaderType is a derived int64 type which is used to represent
// the enumerated node OpenconfigAft_EncapsulationHeaderType. An additional value named
// OpenconfigAft_EncapsulationHeaderType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAft_EncapsulationHeaderType int64

// IsYANGGoEnum ensures that OpenconfigAft_EncapsulationHeaderType implements the yang.GoEnum
// interface. This ensures that OpenconfigAft_EncapsulationHeaderType can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAft_EncapsulationHeaderType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAft_EncapsulationHeaderType.
func (E_OpenconfigAft_EncapsulationHeaderType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigAft_EncapsulationHeaderType_UNSET corresponds to the value UNSET of OpenconfigAft_EncapsulationHeaderType
	OpenconfigAft_EncapsulationHeaderType_UNSET E_OpenconfigAft_EncapsulationHeaderType = 0
	// OpenconfigAft_EncapsulationHeaderType_GRE corresponds to the value GRE of OpenconfigAft_EncapsulationHeaderType
	OpenconfigAft_EncapsulationHeaderType_GRE E_OpenconfigAft_EncapsulationHeaderType = 1
	// OpenconfigAft_EncapsulationHeaderType_IPV4 corresponds to the value IPV4 of OpenconfigAft_EncapsulationHeaderType
	OpenconfigAft_EncapsulationHeaderType_IPV4 E_OpenconfigAft_EncapsulationHeaderType = 2
	// OpenconfigAft_EncapsulationHeaderType_IPV6 corresponds to the value IPV6 of OpenconfigAft_EncapsulationHeaderType
	OpenconfigAft_EncapsulationHeaderType_IPV6 E_OpenconfigAft_EncapsulationHeaderType = 3
	// OpenconfigAft_EncapsulationHeaderType_MPLS corresponds to the value MPLS of OpenconfigAft_EncapsulationHeaderType
	OpenconfigAft_EncapsulationHeaderType_MPLS E_OpenconfigAft_EncapsulationHeaderType = 4
)


// E_OpenconfigPacketMatchTypes_IP_PROTOCOL is a derived int64 type which is used to represent
// the enumerated node OpenconfigPacketMatchTypes_IP_PROTOCOL. An additional value named
// OpenconfigPacketMatchTypes_IP_PROTOCOL_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPacketMatchTypes_IP_PROTOCOL int64

// IsYANGGoEnum ensures that OpenconfigPacketMatchTypes_IP_PROTOCOL implements the yang.GoEnum
// interface. This ensures that OpenconfigPacketMatchTypes_IP_PROTOCOL can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPacketMatchTypes_IP_PROTOCOL) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPacketMatchTypes_IP_PROTOCOL.
func (E_OpenconfigPacketMatchTypes_IP_PROTOCOL) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_UNSET corresponds to the value UNSET of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_UNSET E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 0
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_AUTH corresponds to the value IP_AUTH of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_AUTH E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 1
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_GRE corresponds to the value IP_GRE of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_GRE E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 2
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_ICMP corresponds to the value IP_ICMP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_ICMP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 3
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_IGMP corresponds to the value IP_IGMP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_IGMP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 4
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_L2TP corresponds to the value IP_L2TP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_L2TP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 5
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_PIM corresponds to the value IP_PIM of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_PIM E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 6
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_RSVP corresponds to the value IP_RSVP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_RSVP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 7
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_TCP corresponds to the value IP_TCP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_TCP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 8
	// OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_UDP corresponds to the value IP_UDP of OpenconfigPacketMatchTypes_IP_PROTOCOL
	OpenconfigPacketMatchTypes_IP_PROTOCOL_IP_UDP E_OpenconfigPacketMatchTypes_IP_PROTOCOL = 9
)


// E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE. An additional value named
// OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE int64

// IsYANGGoEnum ensures that OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE.
func (E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE_UNSET corresponds to the value UNSET of OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE
	OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE_UNSET E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE = 0
	// OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE_BGP corresponds to the value BGP of OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE
	OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE_BGP E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE = 1
	// OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE_DIRECTLY_CONNECTED corresponds to the value DIRECTLY_CONNECTED of OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE
	OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE_DIRECTLY_CONNECTED E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE = 2
	// OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE_ISIS corresponds to the value ISIS of OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE
	OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE_ISIS E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE = 3
	// OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE_LOCAL_AGGREGATE corresponds to the value LOCAL_AGGREGATE of OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE
	OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE_LOCAL_AGGREGATE E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE = 4
	// OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE_OSPF corresponds to the value OSPF of OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE
	OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE_OSPF E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE = 5
	// OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE_OSPF3 corresponds to the value OSPF3 of OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE
	OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE_OSPF3 E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE = 6
	// OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE_STATIC corresponds to the value STATIC of OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE
	OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE_STATIC E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE = 7
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_GribiAft_Afts_Mpls_LabelEntry_Config_Label": {
		1: {Name: "IPV4_EXPLICIT_NULL"},
		2: {Name: "ROUTER_ALERT"},
		3: {Name: "IPV6_EXPLICIT_NULL"},
		4: {Name: "IMPLICIT_NULL"},
		8: {Name: "ENTROPY_LABEL_INDICATOR"},
		9: {Name: "NO_LABEL"},
	},
	"E_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack": {
		1: {Name: "IPV4_EXPLICIT_NULL"},
		2: {Name: "ROUTER_ALERT"},
		3: {Name: "IPV6_EXPLICIT_NULL"},
		4: {Name: "IMPLICIT_NULL"},
		8: {Name: "ENTROPY_LABEL_INDICATOR"},
		9: {Name: "NO_LABEL"},
	},
	"E_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack": {
		1: {Name: "IPV4_EXPLICIT_NULL"},
		2: {Name: "ROUTER_ALERT"},
		3: {Name: "IPV6_EXPLICIT_NULL"},
		4: {Name: "IMPLICIT_NULL"},
		8: {Name: "ENTROPY_LABEL_INDICATOR"},
		9: {Name: "NO_LABEL"},
	},
	"E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel": {
		1: {Name: "IPV4_EXPLICIT_NULL"},
		2: {Name: "ROUTER_ALERT"},
		3: {Name: "IPV6_EXPLICIT_NULL"},
		4: {Name: "IMPLICIT_NULL"},
		8: {Name: "ENTROPY_LABEL_INDICATOR"},
		9: {Name: "NO_LABEL"},
	},
	"E_OpenconfigAft_EncapsulationHeaderType": {
		1: {Name: "GRE"},
		2: {Name: "IPV4"},
		3: {Name: "IPV6"},
		4: {Name: "MPLS"},
	},
	"E_OpenconfigPacketMatchTypes_IP_PROTOCOL": {
		1: {Name: "IP_AUTH", DefiningModule: "openconfig-packet-match-types"},
		2: {Name: "IP_GRE", DefiningModule: "openconfig-packet-match-types"},
		3: {Name: "IP_ICMP", DefiningModule: "openconfig-packet-match-types"},
		4: {Name: "IP_IGMP", DefiningModule: "openconfig-packet-match-types"},
		5: {Name: "IP_L2TP", DefiningModule: "openconfig-packet-match-types"},
		6: {Name: "IP_PIM", DefiningModule: "openconfig-packet-match-types"},
		7: {Name: "IP_RSVP", DefiningModule: "openconfig-packet-match-types"},
		8: {Name: "IP_TCP", DefiningModule: "openconfig-packet-match-types"},
		9: {Name: "IP_UDP", DefiningModule: "openconfig-packet-match-types"},
	},
	"E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE": {
		1: {Name: "BGP", DefiningModule: "openconfig-policy-types"},
		2: {Name: "DIRECTLY_CONNECTED", DefiningModule: "openconfig-policy-types"},
		3: {Name: "ISIS", DefiningModule: "openconfig-policy-types"},
		4: {Name: "LOCAL_AGGREGATE", DefiningModule: "openconfig-policy-types"},
		5: {Name: "OSPF", DefiningModule: "openconfig-policy-types"},
		6: {Name: "OSPF3", DefiningModule: "openconfig-policy-types"},
		7: {Name: "STATIC", DefiningModule: "openconfig-policy-types"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x5b, 0x4f, 0xe3, 0x48,
		0x13, 0x7d, 0xe7, 0x57, 0x58, 0xd1, 0x3e, 0x10, 0x09, 0x93, 0x0b, 0xb9, 0x40, 0xa4, 0xef, 0x81,
		0x61, 0x18, 0x16, 0x2d, 0x0c, 0x08, 0xd8, 0x95, 0x56, 0x99, 0x2c, 0xf2, 0x38, 0x1d, 0xb0, 0x26,
		0xd8, 0x91, 0xed, 0xcc, 0x0c, 0x82, 0xfc, 0xf7, 0x4f, 0x49, 0x1c, 0xe7, 0x62, 0x3b, 0x71, 0x77,
		0x97, 0x13, 0xdb, 0x9c, 0xd5, 0x48, 0x1b, 0x12, 0x77, 0xdb, 0xdd, 0x5d, 0x5d, 0xa7, 0xaa, 0x5c,
		0x75, 0xfa, 0x6d, 0x4f, 0x51, 0x14, 0xa5, 0xf0, 0x55, 0x7b, 0x61, 0x85, 0x96, 0x52, 0xe8, 0xb2,
		0x9f, 0x86, 0xce, 0x0a, 0x07, 0xd3, 0x6f, 0xff, 0x32, 0xcc, 0x6e, 0xa1, 0xa5, 0x54, 0xbc, 0x3f,
		0xcf, 0x2c, 0xb3, 0x67, 0x3c, 0x15, 0x5a, 0x4a, 0xd9, 0xfb, 0xe2, 0xb3, 0x61, 0x17, 0x5a, 0xca,
		0xb4, 0x8b, 0xc9, 0x17, 0x5a, 0xcf, 0x75, 0x96, 0xbe, 0x59, 0xea, 0x7c, 0xf2, 0xeb, 0xc1, 0xf2,
		0x6f, 0xcb, 0xb7, 0xf0, 0xbf, 0x5e, 0xbd, 0x95, 0xff, 0xc3, 0xad, 0xcd, 0x7a, 0xc6, 0xef, 0xc0,
		0x3d, 0x96, 0xee, 0x63, 0xe9, 0xaa, 0xd6, 0x73, 0x57, 0xee, 0x34, 0xb9, 0xe2, 0xde, 0x1a, 0xda,
		0x3a, 0x0b, 0x6d, 0x3d, 0x7d, 0x1a, 0xf6, 0xfa, 0xcb, 0xb2, 0xc7, 0x0f, 0x54, 0x18, 0x4c, 0x6f,
		0x74, 0x10, 0x7e, 0xe1, 0x9f, 0x9a, 0x73, 0x6a, 0x3f, 0x0d, 0x5f, 0x98, 0xe9, 0x16, 0x5a, 0x8a,
		0x6b, 0x0f, 0x59, 0xc4, 0x85, 0x0b, 0x57, 0xcd, 0x9e, 0x2b, 0x70, 0xe1, 0x68, 0xe9, 0x9b, 0xd1,
		0xca, 0x88, 0x57, 0x27, 0xd9, 0xff, 0x81, 0xb9, 0xcf, 0xcc, 0x36, 0x99, 0x1b, 0x3d, 0x9c, 0xd9,
		0x84, 0xf8, 0x57, 0x46, 0x3c, 0x64, 0xf8, 0x22, 0x6c, 0x5c, 0x8c, 0x38, 0x8b, 0x12, 0x7f, 0x71,
		0xe2, 0x2e, 0x12, 0xf7, 0x62, 0x71, 0x2f, 0x1a, 0xd7, 0xe2, 0x85, 0x2f, 0x62, 0xc4, 0x62, 0x6e,
		0x5c, 0x54, 0xff, 0x82, 0x17, 0x4d, 0x57, 0x99, 0xe9, 0xda, 0xaf, 0x9b, 0xe7, 0x61, 0x36, 0xb3,
		0xf3, 0x26, 0x1b, 0x86, 0xb5, 0x7e, 0xb9, 0x63, 0x2f, 0x3b, 0xcf, 0xf2, 0xf3, 0x8b, 0x01, 0xaf,
		0x38, 0x08, 0x8b, 0x85, 0xb0, 0x78, 0x08, 0x89, 0xc9, 0x7a, 0x71, 0xd9, 0x20, 0x36, 0xb1, 0xc5,
		0xc7, 0xbf, 0x50, 0x9f, 0xad, 0x61, 0xcc, 0xc9, 0x9b, 0x2d, 0x8f, 0xd7, 0x2e, 0xe6, 0x04, 0xc4,
		0x13, 0x28, 0x6e, 0xc1, 0x12, 0x11, 0x30, 0x71, 0x41, 0x13, 0x15, 0x38, 0x69, 0xc1, 0x93, 0x16,
		0x40, 0x29, 0x41, 0x8c, 0x27, 0x90, 0x31, 0x05, 0x93, 0x5b, 0x40, 0x97, 0xf4, 0x9d, 0xd6, 0xed,
		0xda, 0xcc, 0x71, 0xf8, 0x67, 0x7e, 0x51, 0x03, 0xce, 0x3a, 0xe1, 0x9c, 0x3a, 0x4f, 0x84, 0xcb,
		0x9c, 0xcd, 0x78, 0x45, 0x59, 0x46, 0xa4, 0xe5, 0x45, 0x5b, 0x56, 0xc4, 0xc9, 0x44, 0x9d, 0x4c,
		0xe4, 0x49, 0x44, 0x9f, 0x6f, 0x0b, 0x70, 0x6e, 0x05, 0xff, 0x09, 0x1f, 0x5e, 0x07, 0x4c, 0x6e,
		0xbd, 0xc5, 0xc5, 0x7b, 0x49, 0x4b, 0x1f, 0x0b, 0xb4, 0xbd, 0xd5, 0x5c, 0x97, 0xd9, 0x66, 0xa1,
		0xa5, 0xb4, 0xc5, 0xd6, 0xe7, 0xbf, 0x76, 0x59, 0x3d, 0xd1, 0xd4, 0xde, 0xa9, 0xfa, 0xa5, 0xf3,
		0x56, 0x1d, 0xed, 0xb7, 0x96, 0xff, 0x2e, 0xbe, 0xd5, 0x47, 0x7f, 0xf0, 0xaf, 0x58, 0x67, 0x2f,
		0x99, 0xf5, 0xa5, 0x55, 0x86, 0xa7, 0xa6, 0x69, 0xb9, 0x9a, 0x6b, 0x58, 0x26, 0x9f, 0x4e, 0x74,
		0xf4, 0x67, 0xf6, 0xa2, 0x0d, 0x34, 0xf7, 0x79, 0xbc, 0xfa, 0xa5, 0x27, 0xdb, 0xf8, 0x6e, 0x8c,
		0x25, 0xbb, 0x34, 0x76, 0xa4, 0x4a, 0x33, 0xa3, 0xbe, 0xe4, 0xdb, 0x7d, 0x25, 0x2e, 0xd4, 0x9e,
		0xde, 0xc2, 0xb5, 0x87, 0xba, 0x6b, 0x7a, 0x02, 0x76, 0x31, 0xbe, 0xc3, 0x69, 0xcf, 0x7d, 0x3c,
		0xed, 0xb9, 0xce, 0xe3, 0xb9, 0x77, 0x83, 0xc7, 0x6b, 0x4d, 0x3f, 0x1f, 0xf7, 0xff, 0xe8, 0x69,
		0xbb, 0x3d, 0x9a, 0x29, 0x8c, 0x31, 0x7d, 0x42, 0xb0, 0x20, 0xb1, 0x5f, 0x38, 0x61, 0x00, 0x96,
		0x4c, 0xfe, 0x2d, 0x19, 0x6e, 0xb5, 0xed, 0xaf, 0x57, 0x9f, 0x69, 0x3d, 0x9b, 0xf5, 0x78, 0x16,
		0x6c, 0xa6, 0xa2, 0x9b, 0x1c, 0x6d, 0x6e, 0x3d, 0xfd, 0x70, 0x78, 0xe8, 0xed, 0xff, 0xd2, 0xa2,
		0xdc, 0x6f, 0x71, 0xaf, 0x3a, 0xae, 0xe6, 0x32, 0xfe, 0x5d, 0x3a, 0x6d, 0x96, 0xb0, 0xa7, 0x51,
		0xc5, 0xfe, 0x84, 0xa7, 0x01, 0x4f, 0x03, 0x9e, 0x06, 0x3c, 0x0d, 0x78, 0x1a, 0xa9, 0xf2, 0x34,
		0x38, 0xe0, 0xc2, 0x64, 0xbf, 0x5d, 0xf5, 0xd9, 0x1a, 0xa8, 0x4f, 0xb6, 0x35, 0x1c, 0x88, 0x2b,
		0xaf, 0x95, 0x7e, 0xa0, 0xbf, 0xa0, 0xbf, 0x72, 0xa6, 0xbf, 0xf8, 0x4d, 0x6f, 0x19, 0x13, 0x3c,
		0xcc, 0x14, 0xf7, 0xff, 0x2d, 0x6f, 0x36, 0x67, 0xe5, 0xef, 0xd2, 0xc4, 0xfa, 0x2d, 0x19, 0xdd,
		0x42, 0x0a, 0xf4, 0x8b, 0xa5, 0xbb, 0xcc, 0x75, 0xd4, 0x9e, 0x65, 0xff, 0xd2, 0xec, 0x2e, 0xeb,
		0x8a, 0x6b, 0x98, 0x40, 0x4f, 0xd0, 0x31, 0xd0, 0x31, 0x39, 0xd3, 0x31, 0xba, 0x35, 0x34, 0x5d,
		0x66, 0x37, 0x6a, 0x12, 0x5a, 0x46, 0xc4, 0x40, 0xba, 0xd3, 0xcc, 0x27, 0x26, 0x6c, 0x1e, 0x89,
		0x89, 0xd8, 0xe4, 0xc6, 0xd7, 0x86, 0x29, 0x2c, 0xa3, 0x92, 0x3b, 0x3b, 0xd0, 0xcd, 0x3f, 0x5a,
		0x7f, 0xc8, 0x08, 0xfa, 0xf9, 0x62, 0x6b, 0xba, 0x6b, 0x58, 0xe6, 0x67, 0xe3, 0xc9, 0x98, 0xa4,
		0xae, 0x94, 0x85, 0xfb, 0x1b, 0x1d, 0x48, 0x4c, 0xad, 0xf6, 0x3b, 0x75, 0x53, 0x5b, 0x39, 0xae,
		0xd5, 0x1a, 0xcd, 0x5a, 0xad, 0xdc, 0x3c, 0x6a, 0x96, 0x4f, 0xea, 0xf5, 0x4a, 0xa3, 0x52, 0x4f,
		0xd1, 0x6c, 0xef, 0x6d, 0xa7, 0x55, 0x1a, 0xec, 0xfe, 0x81, 0xa6, 0xff, 0x20, 0x02, 0xe6, 0x60,
		0x57, 0x40, 0x66, 0x20, 0x33, 0x90, 0x19, 0xc8, 0x0c, 0x64, 0x06, 0x32, 0x03, 0x99, 0xb3, 0xfb,
		0xee, 0x9f, 0xe7, 0x35, 0x9a, 0xc2, 0xff, 0xea, 0xff, 0x7e, 0xd2, 0x3d, 0xd5, 0xdb, 0x44, 0xa9,
		0xe4, 0xc7, 0xbf, 0xd8, 0x2b, 0x5f, 0x8c, 0xba, 0x70, 0x65, 0x38, 0xee, 0xa9, 0xeb, 0xc6, 0xcc,
		0x99, 0xbc, 0x36, 0xcc, 0xf3, 0x3e, 0x1b, 0x83, 0xe4, 0x78, 0x23, 0x98, 0xc3, 0x7e, 0x3f, 0xc6,
		0xcb, 0xcf, 0x6b, 0xed, 0x37, 0x7f, 0xa3, 0x1b, 0xbb, 0xcb, 0x6c, 0xd6, 0xfd, 0xf4, 0xea, 0x35,
		0x91, 0x9a, 0x16, 0x4e, 0x49, 0xe3, 0x96, 0xb0, 0x42, 0xac, 0x57, 0xc0, 0x1c, 0x32, 0xb5, 0x5e,
		0x9a, 0x46, 0x44, 0x99, 0xd6, 0x31, 0xa7, 0x25, 0xe6, 0x74, 0xac, 0xcb, 0x5b, 0x8f, 0x33, 0xf8,
		0xf0, 0x31, 0x07, 0x47, 0x14, 0x32, 0x9a, 0x82, 0x31, 0xf8, 0x59, 0x53, 0x87, 0xa6, 0xa1, 0x6b,
		0x4e, 0x8c, 0x9c, 0xff, 0xa5, 0xab, 0x91, 0xf7, 0x9f, 0x95, 0xbc, 0xff, 0xc9, 0xb2, 0x71, 0x26,
		0xfe, 0x2f, 0xb4, 0x41, 0xe6, 0x3f, 0x32, 0xff, 0xa7, 0x17, 0x22, 0xf3, 0x1f, 0xf9, 0x38, 0xbb,
		0x30, 0x78, 0xb9, 0xf3, 0x71, 0x06, 0x62, 0x11, 0x9e, 0x79, 0x48, 0x4b, 0x68, 0xc6, 0x11, 0xc7,
		0x42, 0x1c, 0x2b, 0xed, 0x71, 0xac, 0x09, 0xae, 0x0b, 0xcf, 0xf7, 0x8e, 0xb3, 0x70, 0xf6, 0xf7,
		0xdb, 0x65, 0xf5, 0xa4, 0xf3, 0xde, 0xae, 0xa8, 0x27, 0x9d, 0xe9, 0xc7, 0xca, 0xe4, 0x7f, 0xd3,
		0xcf, 0xd5, 0x76, 0x59, 0xad, 0xcd, 0x3e, 0xd7, 0xdb, 0x65, 0xb5, 0xde, 0x29, 0x7e, 0xfb, 0x76,
		0x58, 0x7c, 0x3b, 0x1a, 0xf1, 0x37, 0x2c, 0x79, 0x37, 0x2b, 0xbe, 0xef, 0xb7, 0x2b, 0x6a, 0xb5,
		0x33, 0xfb, 0xe3, 0xa8, 0x5d, 0x56, 0xab, 0x9d, 0x62, 0x11, 0x95, 0x05, 0x5c, 0xce, 0xce, 0xa2,
		0xeb, 0x50, 0x9a, 0x1b, 0x97, 0xc4, 0xe5, 0x05, 0x97, 0x83, 0x9f, 0xb5, 0xbf, 0xa7, 0x37, 0x99,
		0x7c, 0xde, 0x55, 0x89, 0x01, 0x27, 0xfe, 0x88, 0xe1, 0x0e, 0x0a, 0x0b, 0x60, 0x28, 0xc9, 0xe2,
		0xc3, 0xee, 0x0b, 0x0b, 0xbc, 0x35, 0x43, 0x4d, 0x01, 0x6a, 0x0a, 0xe0, 0xc3, 0x2c, 0x36, 0xe8,
		0x32, 0x5d, 0x1b, 0x38, 0xc3, 0xbe, 0xe6, 0x32, 0xf5, 0x99, 0x69, 0x5d, 0x66, 0x8b, 0xfb, 0x33,
		0x21, 0x7d, 0xc1, 0xb7, 0x81, 0x6f, 0x93, 0x33, 0xdf, 0x86, 0x99, 0x33, 0x29, 0x37, 0x2c, 0xd3,
		0x93, 0x73, 0xd5, 0x1d, 0x77, 0x2b, 0xe1, 0xe9, 0xd4, 0x04, 0xda, 0x9e, 0x9b, 0xc3, 0x97, 0xf1,
		0x50, 0x46, 0x48, 0xf0, 0x87, 0xfa, 0x80, 0xfa, 0xc8, 0x88, 0xfa, 0x40, 0x82, 0xbf, 0x88, 0x7e,
		0x41, 0x82, 0x3f, 0x74, 0x0c, 0x74, 0x4c, 0xdc, 0xf5, 0x46, 0x1a, 0xa1, 0x90, 0xac, 0x22, 0x8d,
		0x30, 0x6c, 0x6a, 0x91, 0x46, 0x98, 0xa8, 0x76, 0x10, 0x6f, 0x85, 0x04, 0x7f, 0x20, 0x33, 0x90,
		0x19, 0xc8, 0x0c, 0x64, 0x06, 0x32, 0x03, 0x99, 0x81, 0xcc, 0x2b, 0xc8, 0x8c, 0xe4, 0x24, 0x60,
		0x30, 0x30, 0x38, 0x64, 0xbd, 0x91, 0x9c, 0x84, 0xe4, 0xa4, 0x0d, 0xbb, 0x60, 0xab, 0xc9, 0x49,
		0xa4, 0xf5, 0x4f, 0xe1, 0xb9, 0x49, 0xe9, 0xab, 0x81, 0x8a, 0x57, 0xff, 0x80, 0xf2, 0x27, 0x2a,
		0x29, 0x93, 0xad, 0x81, 0x0a, 0x95, 0xab, 0x2c, 0xd5, 0x41, 0xc5, 0xa8, 0x2a, 0xe2, 0x99, 0x04,
		0xc9, 0x72, 0xa8, 0x06, 0x57, 0x39, 0x54, 0x03, 0xe5, 0x50, 0x4a, 0x06, 0xcb, 0xa1, 0x1a, 0x02,
		0xe5, 0x50, 0x0d, 0x94, 0x43, 0xa1, 0x1c, 0x6a, 0xe9, 0x42, 0x94, 0x43, 0x21, 0x95, 0x70, 0x17,
		0x46, 0x30, 0xca, 0xa1, 0x10, 0x71, 0x40, 0xc4, 0x81, 0x2a, 0xe2, 0xd0, 0xc8, 0x78, 0xc4, 0x61,
		0x46, 0x43, 0x5c, 0x39, 0xa8, 0x8d, 0x5a, 0xc5, 0xb7, 0xe6, 0x68, 0xf5, 0xcb, 0xf7, 0xb0, 0xcb,
		0x2a, 0x07, 0xcd, 0x51, 0x2b, 0xe2, 0x97, 0xc6, 0xa8, 0xb5, 0xfa, 0x7d, 0xf8, 0x85, 0xf5, 0x15,
		0x26, 0xe4, 0xf1, 0x0f, 0xe3, 0xef, 0xab, 0x51, 0xf7, 0xac, 0x45, 0x34, 0x38, 0x8a, 0x6a, 0x70,
		0x14, 0xd1, 0x20, 0x72, 0x54, 0xd5, 0x88, 0x06, 0xf5, 0xd1, 0x7b, 0xe0, 0xfa, 0xfd, 0xf0, 0x4b,
		0x1b, 0xa3, 0xe2, 0x7b, 0xd4, 0x6f, 0xcd, 0xd1, 0x7b, 0xab, 0x58, 0x2c, 0xed, 0x57, 0xaa, 0xed,
		0xb2, 0x7a, 0x3c, 0x0d, 0xd4, 0x54, 0x3a, 0x81, 0xf8, 0xcd, 0x34, 0x1e, 0x83, 0x28, 0x0c, 0xaf,
		0x1f, 0xd8, 0x58, 0xf4, 0x8f, 0x1b, 0x49, 0x95, 0x88, 0x35, 0x16, 0xdc, 0xe5, 0x06, 0x4a, 0xc4,
		0x60, 0x3c, 0x7e, 0x24, 0xe3, 0x11, 0x25, 0x62, 0x28, 0x11, 0xc3, 0xd6, 0xcc, 0x87, 0x5f, 0x87,
		0x12, 0x31, 0xf8, 0x7b, 0xf0, 0xf7, 0x78, 0xd6, 0x1b, 0x25, 0x62, 0x21, 0xcf, 0x82, 0x12, 0x31,
		0xa8, 0x0f, 0xa8, 0x8f, 0x64, 0x4c, 0x60, 0x19, 0x53, 0x38, 0xcc, 0x24, 0x46, 0x89, 0x18, 0x12,
		0xd1, 0xa1, 0x63, 0x90, 0x88, 0xbe, 0x5e, 0xc0, 0x91, 0x88, 0x2e, 0xd8, 0x0d, 0x12, 0xd1, 0x13,
		0x9f, 0x5a, 0x24, 0xa2, 0x2b, 0x28, 0x11, 0x03, 0x32, 0x03, 0x99, 0x81, 0xcc, 0x40, 0x66, 0x20,
		0x33, 0x90, 0x19, 0xc8, 0x1c, 0x44, 0x66, 0x24, 0x6c, 0x01, 0x83, 0x81, 0xc1, 0x21, 0xeb, 0x8d,
		0x84, 0x2d, 0x24, 0x6c, 0x21, 0x61, 0x8b, 0x73, 0xff, 0x6d, 0x39, 0x61, 0x8b, 0xba, 0x6c, 0x2e,
		0x24, 0x5f, 0x0b, 0x65, 0x73, 0xeb, 0x2c, 0xcb, 0xbc, 0x95, 0xcd, 0x85, 0x49, 0x19, 0x41, 0xd9,
		0x5c, 0x50, 0xae, 0x32, 0x56, 0x36, 0xd7, 0x20, 0x28, 0x9b, 0x6b, 0x10, 0x94, 0xcd, 0xbd, 0x0c,
		0xfa, 0xce, 0xe6, 0x72, 0xb9, 0xc9, 0x55, 0x28, 0x93, 0xcb, 0x4a, 0x99, 0x5c, 0x5f, 0xfb, 0xce,
		0xfa, 0xbc, 0x75, 0x72, 0x8b, 0x8d, 0x50, 0x28, 0x87, 0x42, 0xb9, 0xe9, 0x85, 0x28, 0x94, 0x43,
		0x42, 0xe5, 0x2e, 0xcc, 0x5e, 0xee, 0x84, 0xca, 0x89, 0xfa, 0x12, 0x0f, 0xbb, 0x4c, 0x9b, 0x23,
		0xea, 0x82, 0xa8, 0x4b, 0xce, 0xa2, 0x2e, 0x63, 0xd3, 0x4d, 0x15, 0x91, 0xee, 0x25, 0xc5, 0x7c,
		0x22, 0xd0, 0xd6, 0x7b, 0xf6, 0xad, 0xbf, 0xfa, 0x98, 0x8d, 0x7c, 0x68, 0x98, 0xee, 0x51, 0xb5,
		0x20, 0x11, 0xe9, 0xf7, 0x46, 0xdf, 0x94, 0xe8, 0x42, 0xee, 0x05, 0x90, 0xfc, 0x6c, 0x2c, 0x3a,
		0xa4, 0xd2, 0x6f, 0x2d, 0x88, 0xdf, 0x5e, 0x04, 0xdf, 0x62, 0x34, 0x88, 0x3a, 0x24, 0x7c, 0x77,
		0x21, 0xb8, 0x73, 0xa3, 0xfc, 0xfb, 0xf4, 0xaf, 0x41, 0xb9, 0x76, 0x5c, 0x6f, 0xd6, 0x53, 0xbc,
		0x10, 0x7b, 0xbb, 0x69, 0xdd, 0xd9, 0xdb, 0xa2, 0xd8, 0x10, 0xa8, 0x3f, 0x66, 0x0e, 0x5f, 0x98,
		0x3d, 0x8d, 0x55, 0xc8, 0xeb, 0x40, 0x91, 0x4c, 0x79, 0xbf, 0x0f, 0xb1, 0x8c, 0x79, 0xf1, 0x25,
		0xfb, 0xc8, 0x91, 0xdd, 0x31, 0xde, 0x97, 0x16, 0x7c, 0x79, 0xe2, 0x1a, 0xdc, 0xeb, 0x41, 0xdf,
		0x79, 0xbc, 0x1a, 0x77, 0xbf, 0xab, 0xea, 0x5b, 0x3e, 0x43, 0x5f, 0xc8, 0xc0, 0x47, 0xed, 0x2d,
		0xfc, 0x51, 0x59, 0x43, 0x7c, 0xf7, 0xb5, 0xb7, 0x53, 0x89, 0x47, 0xe9, 0x2d, 0x4a, 0x6f, 0x11,
		0x29, 0x42, 0xa4, 0x08, 0x91, 0x22, 0x44, 0x8a, 0x10, 0x29, 0x42, 0xa4, 0x08, 0x91, 0x22, 0x44,
		0x8a, 0x10, 0x29, 0x42, 0xa4, 0x08, 0x91, 0x22, 0x25, 0x25, 0x19, 0xe3, 0xe0, 0x70, 0x80, 0x85,
		0x0a, 0x0b, 0x35, 0x99, 0x50, 0x8a, 0x4c, 0x48, 0x25, 0x2c, 0xb4, 0x02, 0x0e, 0x07, 0x54, 0x8a,
		0x42, 0xc7, 0xa0, 0x52, 0x74, 0xbd, 0x80, 0xa3, 0x52, 0x54, 0xd2, 0xb5, 0x40, 0xa5, 0x68, 0x62,
		0x53, 0x8b, 0x4a, 0x51, 0x05, 0x1c, 0x0e, 0x40, 0x66, 0x20, 0x33, 0x90, 0x19, 0xc8, 0x0c, 0x64,
		0x06, 0x32, 0x03, 0x99, 0x83, 0xc8, 0x6c, 0x0d, 0x06, 0xac, 0xab, 0xce, 0x5f, 0x88, 0xa9, 0x8e,
		0xab, 0xe9, 0x3f, 0x24, 0xf0, 0x39, 0xa2, 0x43, 0xa0, 0x34, 0x50, 0x3a, 0x67, 0x28, 0x8d, 0xb7,
		0xc8, 0x78, 0x8b, 0x8c, 0xb7, 0xc8, 0x78, 0x8b, 0x1c, 0x7b, 0x0d, 0xf0, 0x16, 0x99, 0xc2, 0x10,
		0x92, 0x14, 0x1b, 0xbc, 0x45, 0xde, 0xa2, 0xcd, 0xca, 0x89, 0xc9, 0x5c, 0xc4, 0x23, 0x61, 0x7a,
		0x98, 0x9b, 0x53, 0x24, 0x4c, 0x91, 0xc8, 0x77, 0xc2, 0x45, 0x54, 0x22, 0x61, 0xe8, 0x67, 0xb1,
		0x48, 0x83, 0x94, 0x77, 0x67, 0xb5, 0x46, 0x23, 0x7d, 0x8c, 0x3b, 0x71, 0xec, 0x43, 0x10, 0xee,
		0xc8, 0xcb, 0x95, 0x2c, 0xd3, 0xce, 0x8a, 0x24, 0x65, 0x89, 0x63, 0x67, 0x0d, 0x65, 0x4d, 0xac,
		0x61, 0xcb, 0x90, 0xea, 0xac, 0x24, 0x07, 0x6c, 0xe6, 0xd7, 0x59, 0x6d, 0x00, 0xaa, 0x9d, 0xac,
		0x50, 0xed, 0x70, 0x26, 0x6f, 0x89, 0x25, 0x6b, 0x81, 0x70, 0x87, 0x36, 0x30, 0x03, 0xc2, 0x1d,
		0x10, 0xee, 0xa0, 0x8c, 0x4a, 0x4c, 0x40, 0xfd, 0x06, 0x86, 0xc4, 0xfb, 0x6a, 0x03, 0x2f, 0xa8,
		0x11, 0xfa, 0xce, 0x5d, 0xe8, 0x7b, 0x68, 0x98, 0x2e, 0xde, 0x4e, 0xef, 0x20, 0xa8, 0x88, 0xb7,
		0xd3, 0xc9, 0x4f, 0x2d, 0xde, 0x4e, 0x2b, 0x1f, 0x9c, 0x59, 0x64, 0x43, 0xca, 0x3b, 0x2d, 0xcf,
		0xc8, 0x57, 0xf6, 0xdb, 0xfd, 0xd3, 0x1a, 0x5c, 0x4c, 0x6e, 0xb5, 0xf4, 0xd7, 0x0e, 0x28, 0x47,
		0x38, 0x4c, 0x1d, 0x7e, 0x13, 0x07, 0x64, 0x23, 0xb0, 0xc5, 0x65, 0x4d, 0x91, 0xdd, 0x93, 0x8d,
		0xc4, 0x2d, 0x75, 0xa1, 0xd9, 0x90, 0x33, 0xd5, 0xe3, 0xf0, 0xef, 0xcb, 0x79, 0x53, 0xb8, 0xca,
		0xd8, 0x9e, 0xdb, 0x71, 0x95, 0x67, 0x32, 0x27, 0x5f, 0xdb, 0x29, 0xe8, 0x36, 0x57, 0xe0, 0x36,
		0xc3, 0x6d, 0x4e, 0xc6, 0x6d, 0xe6, 0xdd, 0x0c, 0xa2, 0x81, 0x4e, 0x9a, 0xc0, 0x27, 0xd1, 0x06,
		0x91, 0xde, 0x28, 0x14, 0x1b, 0x86, 0x6e, 0xe3, 0x50, 0x6d, 0x20, 0xf2, 0x8d, 0x44, 0xbe, 0xa1,
		0x48, 0x37, 0x96, 0xa4, 0xf3, 0x29, 0x28, 0x31, 0xa2, 0x1b, 0x6e, 0xee, 0xcd, 0x98, 0x5d, 0x46,
		0x10, 0x5f, 0xf0, 0x1d, 0x9d, 0x49, 0x77, 0x07, 0xa9, 0x08, 0x56, 0xc8, 0x6e, 0x47, 0xca, 0x6d,
		0x49, 0xbf, 0x3d, 0xa9, 0xb7, 0x69, 0x62, 0xdb, 0x35, 0xb1, 0x6d, 0x9b, 0xc8, 0xf6, 0x95, 0xdb,
		0xc6, 0x04, 0xf1, 0x3e, 0x45, 0x2a, 0xfc, 0x4c, 0xe8, 0x0b, 0x52, 0xfa, 0x88, 0x71, 0x7c, 0xc7,
		0x95, 0x7f, 0xbe, 0x6b, 0xe6, 0x7f, 0xf2, 0xbd, 0xcb, 0x89, 0x8e, 0xd9, 0x51, 0x22, 0xe6, 0x76,
		0xd5, 0xbb, 0x60, 0xec, 0x8e, 0x36, 0x96, 0x17, 0xb9, 0x12, 0x32, 0xc6, 0x85, 0x60, 0xb8, 0xcf,
		0xfb, 0xc3, 0xff, 0x96, 0x2b, 0xfe, 0x27, 0xbf, 0x96, 0x02, 0xeb, 0x28, 0x89, 0xb0, 0x24, 0xc8,
		0x2a, 0x89, 0xa8, 0x30, 0x6c, 0x61, 0xd8, 0x6e, 0x5b, 0xf3, 0x49, 0x23, 0x20, 0x21, 0xf2, 0x51,
		0x20, 0x5e, 0x58, 0x94, 0x54, 0x1c, 0xc7, 0xb6, 0xa3, 0xb9, 0xf8, 0x28, 0x9c, 0x23, 0x17, 0x80,
		0x37, 0x9d, 0x39, 0x11, 0x97, 0xbc, 0x0a, 0xcd, 0x05, 0xcd, 0x05, 0x97, 0x1c, 0x2e, 0x39, 0x5c,
		0x72, 0xb8, 0xe4, 0x70, 0xc9, 0x73, 0xe5, 0x92, 0x4b, 0x00, 0xea, 0x2f, 0x66, 0x3c, 0x3d, 0xbb,
		0x74, 0xca, 0xd6, 0xeb, 0x0f, 0xda, 0x16, 0xda, 0x16, 0xda, 0x36, 0x55, 0xda, 0x56, 0x38, 0x1f,
		0x37, 0x6a, 0x77, 0x1e, 0x13, 0x74, 0x45, 0x43, 0xd0, 0x30, 0xfb, 0x8f, 0x46, 0xfe, 0x15, 0x6a,
		0xc2, 0x06, 0x62, 0xb5, 0x16, 0xe8, 0x96, 0x28, 0xdf, 0x37, 0xd0, 0x6f, 0x02, 0xf4, 0x01, 0x44,
		0xdb, 0x63, 0x79, 0xa9, 0x08, 0x79, 0x1d, 0xb6, 0xb5, 0x54, 0xf4, 0xf9, 0xc3, 0x5b, 0x5d, 0xbd,
		0xbd, 0x74, 0xf4, 0xd2, 0xc1, 0x3b, 0x10, 0x9e, 0x68, 0x16, 0xf1, 0x3b, 0x10, 0x99, 0xb0, 0x96,
		0x42, 0xf9, 0x0a, 0x84, 0xa3, 0xa2, 0x9f, 0x20, 0x8e, 0x98, 0x68, 0xfe, 0x90, 0xc7, 0x08, 0x20,
		0x12, 0xb2, 0x00, 0x33, 0x86, 0xc8, 0x84, 0x4b, 0x6e, 0x2e, 0xea, 0x4d, 0x55, 0x10, 0x8a, 0x52,
		0x93, 0x6c, 0xa3, 0x02, 0x8a, 0x39, 0x36, 0xae, 0xd3, 0x16, 0xea, 0x39, 0x66, 0xcb, 0x82, 0xa3,
		0x2a, 0x71, 0x54, 0x65, 0x02, 0x2e, 0x74, 0x96, 0x13, 0xc7, 0xbf, 0x6b, 0xfa, 0x8f, 0xe1, 0x40,
		0xa5, 0x3a, 0x21, 0x28, 0xbc, 0x3b, 0x54, 0x62, 0x27, 0x17, 0x69, 0x42, 0x4a, 0xf9, 0x87, 0x3e,
		0x28, 0x68, 0x05, 0x55, 0xd3, 0x71, 0x1e, 0x90, 0x6e, 0xf5, 0x2d, 0x5b, 0x5c, 0x89, 0x4c, 0x9b,
		0x43, 0x69, 0x40, 0x69, 0xe4, 0x4c, 0x69, 0x80, 0xbe, 0x61, 0x47, 0x31, 0x43, 0xd0, 0x37, 0x24,
		0x3f, 0xb5, 0xa0, 0x6f, 0x50, 0x52, 0x72, 0xb8, 0x00, 0x78, 0x93, 0x00, 0xbc, 0x00, 0x5e, 0x00,
		0x2f, 0x80, 0x17, 0xc0, 0x0b, 0xe0, 0x95, 0x05, 0xde, 0xec, 0x87, 0xda, 0x49, 0xa9, 0xbf, 0xd7,
		0x84, 0xd9, 0xd3, 0xc7, 0x02, 0xbe, 0xd1, 0x9a, 0x01, 0x05, 0x38, 0xb5, 0xb4, 0xc9, 0x12, 0x82,
		0x47, 0xcb, 0x57, 0x96, 0xb8, 0xc1, 0xe3, 0xd1, 0x6d, 0xf3, 0x4d, 0x06, 0x05, 0x5f, 0x38, 0x07,
		0x53, 0x38, 0x38, 0xc2, 0xb3, 0xc7, 0x11, 0xce, 0xcf, 0x0e, 0x0e, 0x5e, 0x70, 0xf0, 0x82, 0x7b,
		0x17, 0x82, 0x17, 0x1c, 0xef, 0xac, 0x77, 0x61, 0x13, 0xf3, 0xf3, 0x82, 0x0b, 0xd5, 0xb2, 0x49,
		0xd5, 0xae, 0x21, 0xca, 0x85, 0x28, 0x17, 0xa2, 0x5c, 0x88, 0x72, 0x21, 0xca, 0x85, 0x28, 0x17,
		0xa2, 0x5c, 0xbb, 0x8d, 0x72, 0xc9, 0x50, 0x06, 0xc5, 0xf1, 0xb6, 0xc5, 0x78, 0x80, 0x88, 0x78,
		0xc0, 0xb9, 0x4c, 0x1b, 0x21, 0x93, 0x06, 0x6c, 0xe0, 0xb0, 0xc0, 0x65, 0x4d, 0x8f, 0x14, 0xb0,
		0x81, 0xc7, 0x2f, 0x0e, 0xa7, 0xda, 0x99, 0x2e, 0xb3, 0x7b, 0x9a, 0xce, 0xd4, 0xf1, 0x78, 0x05,
		0x76, 0xe8, 0x62, 0xf3, 0x7c, 0xf8, 0xca, 0x46, 0xef, 0x43, 0x6e, 0x54, 0xa3, 0x97, 0x19, 0x4f,
		0x59, 0x90, 0x01, 0x59, 0x8e, 0xf9, 0x38, 0xab, 0x94, 0xe0, 0x46, 0x0f, 0xae, 0xb2, 0xa4, 0xb8,
		0x6f, 0xc7, 0x53, 0x16, 0x26, 0x04, 0xf7, 0x95, 0x30, 0x05, 0x73, 0xe2, 0xac, 0x2b, 0xb0, 0x27,
		0x0a, 0x6f, 0x1e, 0xaa, 0x4d, 0x44, 0xbe, 0x99, 0xc8, 0x37, 0x15, 0xe5, 0xe6, 0x92, 0xf4, 0x39,
		0xc1, 0x9d, 0xb8, 0x6c, 0x53, 0x96, 0x26, 0xcb, 0xd0, 0xf2, 0x37, 0xb4, 0xb3, 0xfa, 0x85, 0xf7,
		0xf7, 0xc4, 0x67, 0x4c, 0x33, 0xb1, 0xe2, 0xf0, 0x3b, 0xa1, 0x7e, 0x5b, 0xea, 0x0d, 0x2a, 0x0e,
		0x2a, 0x0e, 0x2a, 0x2e, 0xc7, 0x2a, 0xae, 0x3d, 0x57, 0x71, 0xff, 0xd3, 0x87, 0xb6, 0xcd, 0x4c,
		0x77, 0xbf, 0x58, 0x3a, 0x3c, 0x2c, 0xf9, 0x57, 0x74, 0xbc, 0x26, 0x8b, 0x7a, 0xc1, 0x09, 0xf9,
		0xce, 0xef, 0x79, 0x9b, 0x34, 0xb4, 0x39, 0x60, 0x33, 0x58, 0x08, 0x6a, 0x2e, 0x85, 0x0a, 0xc4,
		0x59, 0xd1, 0xf9, 0x42, 0x9d, 0x97, 0xb3, 0x9b, 0xde, 0xb1, 0x9e, 0x10, 0xff, 0x79, 0x32, 0xa5,
		0x0c, 0x62, 0x6c, 0xc1, 0x52, 0x2c, 0xc1, 0xd2, 0xee, 0x6b, 0x15, 0xee, 0x2b, 0xdc, 0x57, 0xb8,
		0xaf, 0xb0, 0xed, 0x60, 0xdb, 0xc1, 0xb6, 0x83, 0xfb, 0x0a, 0xf7, 0x15, 0x2a, 0x0e, 0x2a, 0x0e,
		0x2a, 0x0e, 0xee, 0xeb, 0x47, 0x74, 0x5f, 0x45, 0x09, 0x2d, 0x25, 0xbc, 0x57, 0x01, 0xea, 0xca,
		0xdc, 0x27, 0x4a, 0x89, 0xa4, 0x1f, 0xc8, 0x2d, 0x03, 0xb8, 0xf6, 0xc0, 0xb5, 0x97, 0x00, 0x5c,
		0x67, 0xb9, 0x6e, 0x81, 0x99, 0xba, 0x36, 0x70, 0x86, 0x7d, 0xcd, 0x65, 0xea, 0x33, 0xd3, 0xba,
		0x4c, 0x82, 0x23, 0x2b, 0xa4, 0x2f, 0x54, 0x34, 0x7c, 0xe4, 0x38, 0x57, 0x2e, 0x2b, 0x1a, 0xe6,
		0x52, 0x6e, 0x58, 0xa6, 0x27, 0xe7, 0xaa, 0x3b, 0xee, 0x56, 0x82, 0x77, 0xaf, 0x26, 0xd0, 0xf6,
		0xdc, 0x1c, 0xbe, 0x8c, 0x87, 0x32, 0x4a, 0x03, 0xbd, 0x0f, 0xca, 0x9f, 0xa0, 0x2c, 0xa0, 0x2c,
		0x02, 0xeb, 0x8d, 0xf2, 0xa7, 0x2d, 0x87, 0xb8, 0xfc, 0x6e, 0x50, 0xfe, 0x94, 0xf8, 0xd4, 0xa2,
		0xfc, 0x49, 0x49, 0x0b, 0xbb, 0xde, 0x40, 0xd5, 0xba, 0x5d, 0x9b, 0x39, 0x8e, 0x04, 0x06, 0xcf,
		0xfb, 0x00, 0x10, 0x03, 0x88, 0x73, 0x06, 0xc4, 0xc2, 0xd2, 0xbd, 0x64, 0xa6, 0x9f, 0x08, 0xb4,
		0xf5, 0x9e, 0x7d, 0xeb, 0x60, 0x3c, 0x1f, 0xf9, 0xcf, 0x9a, 0xc4, 0xd8, 0x03, 0x73, 0x70, 0x2c,
		0x17, 0x3d, 0x77, 0x99, 0x6d, 0x4a, 0x1f, 0x04, 0x57, 0xf8, 0x6f, 0x7f, 0xbf, 0x5d, 0x56, 0x4f,
		0x3a, 0xef, 0xed, 0x8a, 0x7a, 0xd2, 0x99, 0x7e, 0xac, 0x4c, 0xfe, 0x37, 0xfd, 0x5c, 0x6d, 0x97,
		0xd5, 0xda, 0xec, 0x73, 0xbd, 0x5d, 0x56, 0xeb, 0x9d, 0xe2, 0xb7, 0x6f, 0x87, 0xc5, 0xb7, 0xa3,
		0x11, 0x7f, 0xc3, 0x3f, 0xc4, 0xdf, 0xb6, 0x74, 0xb6, 0xf9, 0xb6, 0x85, 0x46, 0x58, 0x1a, 0x79,
		0x15, 0x16, 0x4d, 0xed, 0x9d, 0xaa, 0x5f, 0x3a, 0x6f, 0x95, 0x83, 0xda, 0xa8, 0x55, 0x7c, 0x6b,
		0x8e, 0x56, 0xbf, 0x7c, 0x0f, 0xbb, 0xac, 0x72, 0xd0, 0x1c, 0xb5, 0x22, 0x7e, 0x69, 0x8c, 0x5a,
		0x31, 0xfb, 0xa8, 0x8f, 0xf6, 0x03, 0x97, 0x8e, 0xbf, 0xaf, 0x46, 0x35, 0xa8, 0x45, 0x34, 0x38,
		0x8a, 0x6a, 0x70, 0x14, 0xd1, 0x20, 0xf2, 0x91, 0xaa, 0x11, 0x0d, 0xea, 0xa3, 0xf7, 0xc0, 0xf5,
		0xfb, 0xe1, 0x97, 0x36, 0x46, 0xc5, 0xf7, 0xa8, 0xdf, 0x9a, 0xa3, 0xf7, 0x56, 0x71, 0x07, 0x5b,
		0x27, 0x93, 0xf6, 0xdb, 0x8b, 0xa6, 0xcb, 0x1b, 0x70, 0x8b, 0x9d, 0xc0, 0x82, 0x83, 0x05, 0x97,
		0x33, 0x0b, 0x4e, 0x5c, 0xbc, 0x65, 0x11, 0x49, 0x1a, 0x89, 0x0a, 0xff, 0x2d, 0x6a, 0xc8, 0x55,
		0xc5, 0x5b, 0x1d, 0x15, 0xdf, 0xea, 0x23, 0x01, 0x4d, 0x99, 0x06, 0xcd, 0x65, 0xd9, 0xc6, 0x93,
		0x61, 0xaa, 0x03, 0xdb, 0x72, 0x2d, 0xdd, 0xea, 0x8b, 0x6b, 0xaf, 0xd5, 0x8e, 0xa0, 0xc1, 0xa0,
		0xc1, 0xf2, 0xe6, 0x83, 0x76, 0x99, 0xe9, 0x1a, 0xee, 0xab, 0xe4, 0x19, 0x4d, 0x02, 0x31, 0xb6,
		0xc2, 0xa5, 0x77, 0xeb, 0x4f, 0x9a, 0x43, 0x90, 0xc9, 0x78, 0xf9, 0xf5, 0xfe, 0xe1, 0xf4, 0xea,
		0xea, 0xf1, 0xf6, 0xee, 0xe6, 0xe1, 0xe6, 0xec, 0xe6, 0xea, 0xf1, 0xe1, 0xdf, 0xdb, 0x73, 0x51,
		0x11, 0x9a, 0x44, 0x13, 0x1d, 0x29, 0x2b, 0x5f, 0x32, 0x2c, 0xea, 0x0f, 0xeb, 0xfe, 0xf2, 0xbe,
		0xb0, 0x8b, 0xe8, 0x2e, 0xd1, 0xf3, 0xdf, 0xdc, 0xdf, 0x7e, 0xc9, 0xf2, 0xf3, 0x7f, 0xbe, 0xbc,
		0x3b, 0x3f, 0x7b, 0xb8, 0xfa, 0xf7, 0xf1, 0xec, 0xe6, 0xeb, 0xd7, 0xf3, 0xb3, 0x87, 0xf3, 0xcf,
		0x59, 0x5f, 0x8d, 0xa3, 0x2c, 0x0f, 0xe0, 0xd3, 0xc5, 0x6d, 0x96, 0x1f, 0xff, 0xea, 0xe6, 0xec,
		0xf4, 0xea, 0xf1, 0xf4, 0xe2, 0xe2, 0xee, 0xfc, 0xe2, 0xf4, 0xe1, 0x3c, 0xcb, 0x43, 0xb9, 0x7f,
		0x38, 0x7d, 0xb8, 0x3c, 0xdb, 0x76, 0xce, 0x6f, 0x27, 0x69, 0x00, 0x4e, 0xc4, 0x20, 0x1d, 0x0c,
		0x9d, 0x67, 0xd6, 0x55, 0x5f, 0x06, 0x7d, 0x47, 0xed, 0x6b, 0xdf, 0x59, 0x5f, 0x75, 0x5c, 0x4d,
		0xff, 0x21, 0x6e, 0x98, 0x46, 0x75, 0x08, 0x03, 0x15, 0x06, 0x6a, 0xde, 0x5c, 0x6c, 0x5f, 0xc6,
		0x3f, 0xda, 0x4b, 0x92, 0xa1, 0x61, 0xba, 0x47, 0x55, 0x82, 0x88, 0xb7, 0x4c, 0x6d, 0x81, 0x5c,
		0xde, 0x06, 0x0d, 0xe6, 0x28, 0x54, 0x79, 0x1c, 0x92, 0x8a, 0x6f, 0xbd, 0xbb, 0x30, 0x16, 0xb3,
		0x06, 0x51, 0x87, 0x84, 0x29, 0x07, 0x04, 0x16, 0xc3, 0x7c, 0x0d, 0x08, 0x12, 0x3e, 0x12, 0x5f,
		0x83, 0x72, 0xed, 0xb8, 0xde, 0xac, 0xa7, 0x78, 0x21, 0xf6, 0x76, 0xd3, 0x3a, 0x6b, 0xaf, 0xfd,
		0x98, 0x39, 0x7c, 0x61, 0xf6, 0xb4, 0xe8, 0x83, 0xe0, 0xad, 0x5f, 0x4d, 0xa2, 0x0f, 0xb1, 0xac,
		0x56, 0xf1, 0x25, 0xeb, 0x24, 0x8a, 0xc9, 0x5c, 0x47, 0x39, 0x85, 0xe9, 0x61, 0xee, 0x53, 0x9a,
		0xc2, 0x14, 0x89, 0x7c, 0x27, 0x8b, 0x47, 0x3f, 0x49, 0x06, 0x8f, 0x86, 0x0e, 0x77, 0x5d, 0x00,
		0x95, 0x59, 0xb9, 0x6a, 0x5a, 0x5a, 0xd3, 0x51, 0xa9, 0xdf, 0x5f, 0x65, 0xa4, 0x9e, 0xb2, 0xda,
		0x73, 0xc9, 0xcc, 0x9c, 0xcc, 0x54, 0x3a, 0x0b, 0xfe, 0xf2, 0x5e, 0x9b, 0x96, 0xc4, 0xf1, 0x74,
		0xf3, 0x9a, 0xb4, 0x14, 0x1e, 0x4a, 0x17, 0x23, 0x01, 0x1f, 0xe7, 0xd2, 0x51, 0x88, 0x16, 0xd1,
		0x59, 0x74, 0xfe, 0x87, 0x2c, 0x9e, 0x40, 0x27, 0x7b, 0xf6, 0x9c, 0xd4, 0xb1, 0x73, 0x03, 0xab,
		0x6f, 0xe8, 0xaf, 0x6a, 0xcf, 0xb2, 0x7f, 0x69, 0x76, 0xd7, 0x30, 0x9f, 0x36, 0x1f, 0x3f, 0x17,
		0x6c, 0x82, 0x63, 0xe8, 0xb2, 0x72, 0x0c, 0x5d, 0x60, 0xed, 0x54, 0x66, 0xba, 0xf6, 0x6b, 0xfc,
		0x53, 0xe9, 0xa2, 0x3a, 0xc0, 0x21, 0x75, 0x38, 0xa4, 0x6e, 0x7a, 0x21, 0x0e, 0xa9, 0x43, 0xb1,
		0xf7, 0x2e, 0xac, 0x61, 0x1c, 0x52, 0x47, 0x23, 0xc6, 0xf2, 0xe2, 0x4c, 0xe5, 0xa0, 0xe2, 0xbd,
		0x07, 0xaa, 0x34, 0x13, 0x0f, 0xfa, 0xa1, 0x4a, 0x33, 0x89, 0x28, 0xac, 0x82, 0x2a, 0xcd, 0xed,
		0xc5, 0xd8, 0x33, 0x5b, 0xa5, 0xd9, 0x75, 0xf4, 0x81, 0x54, 0x89, 0xe6, 0xa4, 0x03, 0x40, 0x30,
		0x20, 0x38, 0x67, 0x10, 0x2c, 0x20, 0xd7, 0x8b, 0xb2, 0x5d, 0x07, 0x00, 0x03, 0x80, 0x53, 0x0a,
		0xc0, 0x8d, 0x23, 0xc0, 0xed, 0x8e, 0xe0, 0x76, 0x20, 0x86, 0x44, 0x8b, 0x80, 0x2b, 0x16, 0x65,
		0x00, 0xe4, 0x02, 0x72, 0x33, 0x40, 0x89, 0x20, 0x3c, 0xdb, 0xd9, 0x67, 0x44, 0x90, 0x66, 0x7a,
		0xfe, 0xc0, 0x84, 0x08, 0x25, 0xef, 0x66, 0xc5, 0xf7, 0xfd, 0x76, 0x45, 0xad, 0x76, 0x66, 0x7f,
		0x1c, 0xb5, 0xcb, 0x6a, 0xb5, 0x53, 0xfc, 0x70, 0x84, 0x09, 0xf9, 0x94, 0xa5, 0xad, 0xf0, 0x25,
		0x80, 0x2e, 0x61, 0x91, 0x2e, 0xa1, 0xb4, 0x5f, 0x19, 0xef, 0xb7, 0xe3, 0xe9, 0x16, 0xac, 0x74,
		0x02, 0x3b, 0x73, 0xba, 0xd3, 0xc0, 0xaa, 0x10, 0xdf, 0x00, 0x94, 0xad, 0x4b, 0x5e, 0xec, 0x04,
		0x46, 0x20, 0x8c, 0xc0, 0x3c, 0x1a, 0x81, 0x53, 0xf1, 0x96, 0x26, 0xb1, 0xcd, 0x6a, 0xe1, 0xc7,
		0x31, 0x01, 0x72, 0xd7, 0x51, 0xf7, 0x91, 0x48, 0x14, 0x85, 0x3a, 0x50, 0x95, 0x44, 0x50, 0x85,
		0x20, 0x70, 0x45, 0x1a, 0xc0, 0x4a, 0x7a, 0x09, 0xaa, 0xf5, 0x1a, 0x4a, 0x3e, 0x32, 0xef, 0xb8,
		0x48, 0x91, 0x51, 0x04, 0x74, 0xbf, 0x8c, 0xfe, 0x23, 0x21, 0xa7, 0x08, 0x0c, 0xf0, 0xf2, 0xd6,
		0xe7, 0xa7, 0x28, 0x50, 0x44, 0x72, 0x1d, 0x69, 0x0d, 0x4d, 0xa3, 0xa5, 0x57, 0x07, 0x79, 0x79,
		0x71, 0x2d, 0x51, 0xa7, 0x4f, 0xa8, 0xbb, 0xe8, 0x87, 0x76, 0xfa, 0xf7, 0xc3, 0x9f, 0x39, 0x1d,
		0xda, 0xdd, 0xfd, 0x3f, 0x79, 0x5d, 0xb5, 0x8b, 0xbb, 0xf3, 0x9c, 0x8e, 0xec, 0xaa, 0xfa, 0x90,
		0xd7, 0x45, 0xbb, 0xbd, 0xbc, 0xce, 0xe9, 0xc8, 0xfe, 0xfe, 0x9c, 0xd7, 0x35, 0xbb, 0x3c, 0xcb,
		0xad, 0xe6, 0x7f, 0x38, 0xa3, 0x18, 0x99, 0x54, 0x0f, 0x1d, 0xbc, 0x64, 0x8d, 0xb1, 0x66, 0xfd,
		0x9a, 0xda, 0x75, 0x5c, 0x75, 0x60, 0xd9, 0xae, 0x78, 0x8c, 0x6d, 0xb1, 0x13, 0xc4, 0xd8, 0x10,
		0x63, 0xcb, 0x59, 0x8c, 0x6d, 0x2c, 0xd7, 0xaa, 0x39, 0x7c, 0xf9, 0x2e, 0x54, 0xf8, 0x3c, 0x13,
		0xf1, 0x06, 0x52, 0x9c, 0x76, 0x1a, 0x39, 0x42, 0x8a, 0x53, 0xf4, 0xd4, 0x36, 0xea, 0xf5, 0x23,
		0x24, 0x15, 0xef, 0x0a, 0x80, 0x1d, 0x5b, 0x97, 0x07, 0x60, 0xbf, 0x13, 0x00, 0x30, 0x00, 0x18,
		0x00, 0x0c, 0x00, 0x06, 0x00, 0x03, 0x80, 0x01, 0xc0, 0x9b, 0xa7, 0x0d, 0x67, 0x77, 0x00, 0x80,
		0x01, 0xc0, 0x49, 0x89, 0xb7, 0x82, 0xb3, 0x3b, 0x92, 0xd3, 0x5c, 0x73, 0xba, 0x57, 0x71, 0xc5,
		0x25, 0x4a, 0x19, 0x0b, 0xbd, 0x05, 0xbd, 0x05, 0x42, 0xe4, 0x4d, 0xcf, 0x0e, 0x42, 0x64, 0x24,
		0xc6, 0xc5, 0x74, 0x01, 0x40, 0x88, 0x9c, 0x82, 0x35, 0x00, 0x21, 0x32, 0x85, 0xb9, 0x23, 0x29,
		0x36, 0x20, 0x44, 0xce, 0xbc, 0x4f, 0x3d, 0xc6, 0x5d, 0x57, 0x97, 0x34, 0x4b, 0x5d, 0x1d, 0x36,
		0x29, 0x6c, 0xd2, 0x5c, 0xda, 0xa4, 0xdc, 0xa2, 0xad, 0x80, 0x2c, 0x03, 0x81, 0xec, 0x04, 0x2c,
		0x2a, 0xea, 0xa9, 0x6d, 0x22, 0x88, 0x4d, 0x06, 0xb8, 0x19, 0xa0, 0x5e, 0x0f, 0x90, 0xeb, 0x96,
		0x22, 0xe8, 0x76, 0x4b, 0x5c, 0x64, 0xa9, 0xca, 0x26, 0x22, 0xe9, 0xdb, 0xc9, 0x5d, 0xbe, 0xf8,
		0x37, 0x09, 0x7c, 0x71, 0x3e, 0xbe, 0xe9, 0xa3, 0x07, 0xec, 0x54, 0x4c, 0xed, 0x31, 0x88, 0x78,
		0xf9, 0x28, 0x3a, 0x85, 0xa8, 0x39, 0x39, 0xb7, 0x2c, 0x98, 0x64, 0x13, 0xb2, 0x5a, 0x52, 0xc4,
		0x24, 0xcb, 0x6d, 0x95, 0xcc, 0x33, 0x47, 0x98, 0xd6, 0xe3, 0x2b, 0x21, 0xf2, 0x9d, 0x22, 0x0e,
		0x55, 0x5f, 0xb8, 0xf5, 0xf4, 0xc7, 0xe1, 0xa1, 0xa7, 0x08, 0x4a, 0x53, 0x89, 0xdf, 0xe2, 0xce,
		0x9c, 0x1e, 0x09, 0xc1, 0xbd, 0x33, 0x79, 0x4e, 0x92, 0x10, 0xe6, 0x78, 0xae, 0x62, 0x67, 0xe6,
		0x74, 0x67, 0x82, 0xe3, 0x19, 0x6e, 0x33, 0xdc, 0x66, 0x70, 0x3c, 0xc3, 0x6b, 0x86, 0xd7, 0x1c,
		0x3d, 0xb5, 0xe0, 0x78, 0x56, 0xc0, 0xf1, 0x0c, 0x08, 0x06, 0x04, 0xa7, 0x1a, 0x82, 0xc1, 0xf1,
		0x0c, 0x00, 0xce, 0x29, 0x00, 0x83, 0xe3, 0x79, 0x67, 0x70, 0x0b, 0x8e, 0x67, 0x40, 0x2e, 0x20,
		0x97, 0x58, 0xb8, 0x15, 0x70, 0x3c, 0x2b, 0xe0, 0x78, 0x06, 0xc7, 0x33, 0x38, 0x9e, 0xc1, 0xf1,
		0x0c, 0x8e, 0xe7, 0xb4, 0x1b, 0x80, 0xe0, 0x78, 0x86, 0x11, 0x08, 0x23, 0x30, 0x8e, 0x78, 0x83,
		0xe3, 0x59, 0x02, 0xb9, 0xc1, 0xf1, 0x9c, 0x4c, 0x14, 0x85, 0x3a, 0x50, 0x95, 0x44, 0x50, 0x85,
		0x20, 0x70, 0x45, 0x1a, 0xc0, 0x4a, 0x7a, 0x09, 0xc0, 0xf1, 0x9c, 0x07, 0xc7, 0x05, 0x1c, 0xcf,
		0x7c, 0x82, 0x0f, 0x8e, 0xe7, 0xad, 0x0f, 0x0d, 0x1c, 0xcf, 0x59, 0x1c, 0x1a, 0x38, 0x9e, 0x33,
		0x38, 0x34, 0x70, 0x3c, 0x67, 0x6f, 0x64, 0xe0, 0x78, 0x4e, 0xd2, 0x14, 0x04, 0xc7, 0x73, 0x9c,
		0x35, 0x03, 0xc7, 0x33, 0x62, 0x6c, 0x88, 0xb1, 0xad, 0x5f, 0x6f, 0x50, 0x4c, 0xee, 0x32, 0x7c,
		0x81, 0x14, 0xa7, 0xe4, 0xa7, 0x16, 0x14, 0x93, 0xbb, 0x04, 0x60, 0x70, 0x3c, 0x03, 0x80, 0x01,
		0xc0, 0x00, 0x60, 0x00, 0x30, 0x00, 0x18, 0x00, 0xbc, 0x6d, 0x00, 0x06, 0xc7, 0x33, 0x00, 0x18,
		0x00, 0x9c, 0x94, 0x78, 0x2b, 0xe0, 0x78, 0x06, 0xc7, 0x33, 0xf4, 0x16, 0xf4, 0x16, 0x38, 0x9e,
		0xb7, 0xe2, 0x37, 0x80, 0xe3, 0x39, 0x29, 0x6f, 0x8a, 0xd8, 0xf4, 0x0f, 0xb8, 0x00, 0xe0, 0x78,
		0x4e, 0xc1, 0x1a, 0x80, 0xe3, 0x99, 0xc2, 0xdc, 0x91, 0x14, 0x1b, 0x70, 0x3c, 0x67, 0xde, 0xa7,
		0x06, 0xc7, 0x33, 0x6c, 0x52, 0xd8, 0xa4, 0x84, 0xa2, 0xad, 0x80, 0x2c, 0x03, 0x81, 0xec, 0x04,
		0x2c, 0x2a, 0x70, 0x3c, 0xe7, 0x02, 0x70, 0x4d, 0xf6, 0xdb, 0x55, 0x9f, 0xad, 0x81, 0xfa, 0x64,
		0x5b, 0x43, 0x09, 0x86, 0xaa, 0x95, 0x7e, 0x00, 0xbf, 0x80, 0xdf, 0x9c, 0xc1, 0x2f, 0x3f, 0xa9,
		0x71, 0xc0, 0x1b, 0x68, 0x8a, 0x85, 0xb1, 0x67, 0x24, 0xc7, 0xfe, 0xbf, 0xe5, 0xcd, 0xe6, 0xac,
		0xfc, 0x5d, 0x9a, 0xb0, 0x0b, 0x97, 0x8c, 0x6e, 0x21, 0x05, 0xfa, 0xc5, 0xd2, 0x5d, 0xe6, 0x3a,
		0x33, 0xe6, 0x76, 0xd6, 0x15, 0xd7, 0x30, 0x81, 0x9e, 0xa0, 0x63, 0xa0, 0x63, 0x72, 0xa6, 0x63,
		0x74, 0x6b, 0x68, 0xba, 0xcc, 0x06, 0x25, 0x2d, 0x8c, 0xfc, 0x5c, 0x1a, 0xf9, 0xa0, 0xa4, 0x4d,
		0x8b, 0xdd, 0x3f, 0xd0, 0xf4, 0x1f, 0x44, 0xc0, 0x1c, 0xec, 0x0a, 0xc8, 0x0c, 0x64, 0x06, 0x32,
		0x03, 0x99, 0x81, 0xcc, 0x40, 0x66, 0x20, 0x73, 0xee, 0x4e, 0x5d, 0xe3, 0x39, 0xbd, 0x48, 0x21,
		0x3a, 0x74, 0xed, 0x7e, 0x72, 0x4f, 0xaa, 0x93, 0x9d, 0xf6, 0x24, 0x96, 0x61, 0x0c, 0xc0, 0x71,
		0x0f, 0xc5, 0x29, 0x5c, 0x19, 0x8e, 0x7b, 0xea, 0xba, 0xf1, 0x8e, 0xeb, 0x19, 0xeb, 0xdc, 0xf3,
		0x3e, 0x1b, 0x43, 0xe9, 0x78, 0xbb, 0x98, 0xc3, 0x7e, 0x3f, 0xc6, 0x11, 0x54, 0xd7, 0xda, 0x6f,
		0xfe, 0x46, 0x37, 0x76, 0x97, 0xd9, 0xac, 0xfb, 0xe9, 0xd5, 0x6b, 0x22, 0x35, 0x21, 0x9c, 0xf2,
		0x48, 0x25, 0x87, 0x85, 0x58, 0xe7, 0x73, 0xc9, 0x4a, 0xde, 0x7a, 0x99, 0x8b, 0x96, 0xa4, 0xf0,
		0x5f, 0x22, 0xa6, 0x32, 0xee, 0x14, 0xf2, 0x4e, 0xdd, 0x9a, 0x29, 0xe2, 0x9a, 0x9a, 0xf0, 0x49,
		0x08, 0x0e, 0x71, 0xf9, 0x9b, 0x95, 0xc1, 0x6e, 0x1a, 0xe4, 0xfa, 0xc1, 0x85, 0x0c, 0x65, 0xdd,
		0x10, 0x96, 0x9f, 0x78, 0xfe, 0x5c, 0xd3, 0x4f, 0xde, 0x93, 0x45, 0x3d, 0x51, 0xc1, 0x70, 0xbe,
		0x68, 0x3f, 0xd8, 0x9d, 0x65, 0x05, 0x2d, 0xe3, 0xd5, 0xa7, 0x2c, 0x2c, 0xfe, 0xb4, 0xf4, 0x3c,
		0x9f, 0xd9, 0x4f, 0x43, 0xf7, 0x74, 0xd6, 0x68, 0x6f, 0xf4, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff,
		0x01, 0x00, 0x00, 0xff, 0xff, 0x12, 0xee, 0xb9, 0xf9, 0x50, 0x7c, 0x02, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/afts/ipv4-unicast/ipv4-entry/state/decapsulate-header": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAft_EncapsulationHeaderType)(0)),
	},
	"/afts/ipv6-unicast/ipv6-entry/state/decapsulate-header": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAft_EncapsulationHeaderType)(0)),
	},
	"/afts/mpls/label-entry/label": []reflect.Type{
		reflect.TypeOf((E_GribiAft_Afts_Mpls_LabelEntry_Config_Label)(0)),
	},
	"/afts/mpls/label-entry/state/label": []reflect.Type{
		reflect.TypeOf((E_GribiAft_Afts_Mpls_LabelEntry_Config_Label)(0)),
	},
	"/afts/mpls/label-entry/state/popped-mpls-label-stack": []reflect.Type{
		reflect.TypeOf((E_GribiAft_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack)(0)),
	},
	"/afts/next-hops/next-hop/state/encapsulate-header": []reflect.Type{
		reflect.TypeOf((E_OpenconfigAft_EncapsulationHeaderType)(0)),
	},
	"/afts/next-hops/next-hop/state/origin-protocol": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE)(0)),
	},
	"/afts/next-hops/next-hop/state/pushed-mpls-label-stack": []reflect.Type{
		reflect.TypeOf((E_GribiAft_Afts_NextHops_NextHop_State_PushedMplsLabelStack)(0)),
	},
	"/afts/policy-forwarding/policy-forwarding-entry/config/ip-protocol": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPacketMatchTypes_IP_PROTOCOL)(0)),
	},
	"/afts/policy-forwarding/policy-forwarding-entry/config/mpls-label": []reflect.Type{
		reflect.TypeOf((E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel)(0)),
	},
	"/afts/policy-forwarding/policy-forwarding-entry/state/ip-protocol": []reflect.Type{
		reflect.TypeOf((E_OpenconfigPacketMatchTypes_IP_PROTOCOL)(0)),
	},
	"/afts/policy-forwarding/policy-forwarding-entry/state/mpls-label": []reflect.Type{
		reflect.TypeOf((E_GribiAft_Afts_PolicyForwarding_PolicyForwardingEntry_Config_MplsLabel)(0)),
	},
}
