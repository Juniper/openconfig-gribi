// gribi_aft.enums is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - /Users/robjs/go/src/github.com/openconfig/gribi/scripts/../yang/gribi-aft.yang
// Include paths:
//   - /Users/robjs/go/src/github.com/openconfig/gribi/yang/...
//   - /Users/robjs/go/src/github.com/openconfig/gribi/yang/deps/...

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.7
// source: proto/gribi_aft/enums/enums.proto

package enums

import (
	_ "github.com/openconfig/ygot/proto/yext"
	_ "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OpenconfigAftEncapsulationHeaderType represents an enumerated type generated for the YANG enumerated type encapsulation-header-type.
type OpenconfigAftEncapsulationHeaderType int32

const (
	OpenconfigAftEncapsulationHeaderType_OPENCONFIGAFTENCAPSULATIONHEADERTYPE_UNSET OpenconfigAftEncapsulationHeaderType = 0
	OpenconfigAftEncapsulationHeaderType_OPENCONFIGAFTENCAPSULATIONHEADERTYPE_GRE   OpenconfigAftEncapsulationHeaderType = 1
	OpenconfigAftEncapsulationHeaderType_OPENCONFIGAFTENCAPSULATIONHEADERTYPE_IPV4  OpenconfigAftEncapsulationHeaderType = 2
	OpenconfigAftEncapsulationHeaderType_OPENCONFIGAFTENCAPSULATIONHEADERTYPE_IPV6  OpenconfigAftEncapsulationHeaderType = 3
	OpenconfigAftEncapsulationHeaderType_OPENCONFIGAFTENCAPSULATIONHEADERTYPE_MPLS  OpenconfigAftEncapsulationHeaderType = 4
)

// Enum value maps for OpenconfigAftEncapsulationHeaderType.
var (
	OpenconfigAftEncapsulationHeaderType_name = map[int32]string{
		0: "OPENCONFIGAFTENCAPSULATIONHEADERTYPE_UNSET",
		1: "OPENCONFIGAFTENCAPSULATIONHEADERTYPE_GRE",
		2: "OPENCONFIGAFTENCAPSULATIONHEADERTYPE_IPV4",
		3: "OPENCONFIGAFTENCAPSULATIONHEADERTYPE_IPV6",
		4: "OPENCONFIGAFTENCAPSULATIONHEADERTYPE_MPLS",
	}
	OpenconfigAftEncapsulationHeaderType_value = map[string]int32{
		"OPENCONFIGAFTENCAPSULATIONHEADERTYPE_UNSET": 0,
		"OPENCONFIGAFTENCAPSULATIONHEADERTYPE_GRE":   1,
		"OPENCONFIGAFTENCAPSULATIONHEADERTYPE_IPV4":  2,
		"OPENCONFIGAFTENCAPSULATIONHEADERTYPE_IPV6":  3,
		"OPENCONFIGAFTENCAPSULATIONHEADERTYPE_MPLS":  4,
	}
)

func (x OpenconfigAftEncapsulationHeaderType) Enum() *OpenconfigAftEncapsulationHeaderType {
	p := new(OpenconfigAftEncapsulationHeaderType)
	*p = x
	return p
}

func (x OpenconfigAftEncapsulationHeaderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAftEncapsulationHeaderType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_gribi_aft_enums_enums_proto_enumTypes[0].Descriptor()
}

func (OpenconfigAftEncapsulationHeaderType) Type() protoreflect.EnumType {
	return &file_proto_gribi_aft_enums_enums_proto_enumTypes[0]
}

func (x OpenconfigAftEncapsulationHeaderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAftEncapsulationHeaderType.Descriptor instead.
func (OpenconfigAftEncapsulationHeaderType) EnumDescriptor() ([]byte, []int) {
	return file_proto_gribi_aft_enums_enums_proto_rawDescGZIP(), []int{0}
}

// OpenconfigAftLabelEntryLabel represents an enumerated type generated for the YANG enumerated type mpls-label.
type OpenconfigAftLabelEntryLabel int32

const (
	OpenconfigAftLabelEntryLabel_GRIBIAFT_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_UNSET                   OpenconfigAftLabelEntryLabel = 0
	OpenconfigAftLabelEntryLabel_GRIBIAFT_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_IPV4_EXPLICIT_NULL      OpenconfigAftLabelEntryLabel = 1
	OpenconfigAftLabelEntryLabel_GRIBIAFT_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_ROUTER_ALERT            OpenconfigAftLabelEntryLabel = 2
	OpenconfigAftLabelEntryLabel_GRIBIAFT_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_IPV6_EXPLICIT_NULL      OpenconfigAftLabelEntryLabel = 3
	OpenconfigAftLabelEntryLabel_GRIBIAFT_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_IMPLICIT_NULL           OpenconfigAftLabelEntryLabel = 4
	OpenconfigAftLabelEntryLabel_GRIBIAFT_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_ENTROPY_LABEL_INDICATOR OpenconfigAftLabelEntryLabel = 8
	OpenconfigAftLabelEntryLabel_GRIBIAFT_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_NO_LABEL                OpenconfigAftLabelEntryLabel = 9
)

// Enum value maps for OpenconfigAftLabelEntryLabel.
var (
	OpenconfigAftLabelEntryLabel_name = map[int32]string{
		0: "GRIBIAFT_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_UNSET",
		1: "GRIBIAFT_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_IPV4_EXPLICIT_NULL",
		2: "GRIBIAFT_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_ROUTER_ALERT",
		3: "GRIBIAFT_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_IPV6_EXPLICIT_NULL",
		4: "GRIBIAFT_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_IMPLICIT_NULL",
		8: "GRIBIAFT_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_ENTROPY_LABEL_INDICATOR",
		9: "GRIBIAFT_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_NO_LABEL",
	}
	OpenconfigAftLabelEntryLabel_value = map[string]int32{
		"GRIBIAFT_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_UNSET":                   0,
		"GRIBIAFT_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_IPV4_EXPLICIT_NULL":      1,
		"GRIBIAFT_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_ROUTER_ALERT":            2,
		"GRIBIAFT_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_IPV6_EXPLICIT_NULL":      3,
		"GRIBIAFT_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_IMPLICIT_NULL":           4,
		"GRIBIAFT_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_ENTROPY_LABEL_INDICATOR": 8,
		"GRIBIAFT_AFTS_MPLS_LABELENTRY_CONFIG_LABEL_NO_LABEL":                9,
	}
)

func (x OpenconfigAftLabelEntryLabel) Enum() *OpenconfigAftLabelEntryLabel {
	p := new(OpenconfigAftLabelEntryLabel)
	*p = x
	return p
}

func (x OpenconfigAftLabelEntryLabel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAftLabelEntryLabel) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_gribi_aft_enums_enums_proto_enumTypes[1].Descriptor()
}

func (OpenconfigAftLabelEntryLabel) Type() protoreflect.EnumType {
	return &file_proto_gribi_aft_enums_enums_proto_enumTypes[1]
}

func (x OpenconfigAftLabelEntryLabel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAftLabelEntryLabel.Descriptor instead.
func (OpenconfigAftLabelEntryLabel) EnumDescriptor() ([]byte, []int) {
	return file_proto_gribi_aft_enums_enums_proto_rawDescGZIP(), []int{1}
}

// OpenconfigAftLabelEntryPoppedMplsLabelStack represents an enumerated type generated for the YANG enumerated type mpls-label.
type OpenconfigAftLabelEntryPoppedMplsLabelStack int32

const (
	OpenconfigAftLabelEntryPoppedMplsLabelStack_GRIBIAFT_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_UNSET                   OpenconfigAftLabelEntryPoppedMplsLabelStack = 0
	OpenconfigAftLabelEntryPoppedMplsLabelStack_GRIBIAFT_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_IPV4_EXPLICIT_NULL      OpenconfigAftLabelEntryPoppedMplsLabelStack = 1
	OpenconfigAftLabelEntryPoppedMplsLabelStack_GRIBIAFT_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_ROUTER_ALERT            OpenconfigAftLabelEntryPoppedMplsLabelStack = 2
	OpenconfigAftLabelEntryPoppedMplsLabelStack_GRIBIAFT_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_IPV6_EXPLICIT_NULL      OpenconfigAftLabelEntryPoppedMplsLabelStack = 3
	OpenconfigAftLabelEntryPoppedMplsLabelStack_GRIBIAFT_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_IMPLICIT_NULL           OpenconfigAftLabelEntryPoppedMplsLabelStack = 4
	OpenconfigAftLabelEntryPoppedMplsLabelStack_GRIBIAFT_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_ENTROPY_LABEL_INDICATOR OpenconfigAftLabelEntryPoppedMplsLabelStack = 8
	OpenconfigAftLabelEntryPoppedMplsLabelStack_GRIBIAFT_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_NO_LABEL                OpenconfigAftLabelEntryPoppedMplsLabelStack = 9
)

// Enum value maps for OpenconfigAftLabelEntryPoppedMplsLabelStack.
var (
	OpenconfigAftLabelEntryPoppedMplsLabelStack_name = map[int32]string{
		0: "GRIBIAFT_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_UNSET",
		1: "GRIBIAFT_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_IPV4_EXPLICIT_NULL",
		2: "GRIBIAFT_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_ROUTER_ALERT",
		3: "GRIBIAFT_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_IPV6_EXPLICIT_NULL",
		4: "GRIBIAFT_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_IMPLICIT_NULL",
		8: "GRIBIAFT_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_ENTROPY_LABEL_INDICATOR",
		9: "GRIBIAFT_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_NO_LABEL",
	}
	OpenconfigAftLabelEntryPoppedMplsLabelStack_value = map[string]int32{
		"GRIBIAFT_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_UNSET":                   0,
		"GRIBIAFT_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_IPV4_EXPLICIT_NULL":      1,
		"GRIBIAFT_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_ROUTER_ALERT":            2,
		"GRIBIAFT_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_IPV6_EXPLICIT_NULL":      3,
		"GRIBIAFT_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_IMPLICIT_NULL":           4,
		"GRIBIAFT_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_ENTROPY_LABEL_INDICATOR": 8,
		"GRIBIAFT_AFTS_MPLS_LABELENTRY_STATE_POPPEDMPLSLABELSTACK_NO_LABEL":                9,
	}
)

func (x OpenconfigAftLabelEntryPoppedMplsLabelStack) Enum() *OpenconfigAftLabelEntryPoppedMplsLabelStack {
	p := new(OpenconfigAftLabelEntryPoppedMplsLabelStack)
	*p = x
	return p
}

func (x OpenconfigAftLabelEntryPoppedMplsLabelStack) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAftLabelEntryPoppedMplsLabelStack) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_gribi_aft_enums_enums_proto_enumTypes[2].Descriptor()
}

func (OpenconfigAftLabelEntryPoppedMplsLabelStack) Type() protoreflect.EnumType {
	return &file_proto_gribi_aft_enums_enums_proto_enumTypes[2]
}

func (x OpenconfigAftLabelEntryPoppedMplsLabelStack) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAftLabelEntryPoppedMplsLabelStack.Descriptor instead.
func (OpenconfigAftLabelEntryPoppedMplsLabelStack) EnumDescriptor() ([]byte, []int) {
	return file_proto_gribi_aft_enums_enums_proto_rawDescGZIP(), []int{2}
}

// OpenconfigAftNextHopPushedMplsLabelStack represents an enumerated type generated for the YANG enumerated type mpls-label.
type OpenconfigAftNextHopPushedMplsLabelStack int32

const (
	OpenconfigAftNextHopPushedMplsLabelStack_GRIBIAFT_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_UNSET                   OpenconfigAftNextHopPushedMplsLabelStack = 0
	OpenconfigAftNextHopPushedMplsLabelStack_GRIBIAFT_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_IPV4_EXPLICIT_NULL      OpenconfigAftNextHopPushedMplsLabelStack = 1
	OpenconfigAftNextHopPushedMplsLabelStack_GRIBIAFT_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_ROUTER_ALERT            OpenconfigAftNextHopPushedMplsLabelStack = 2
	OpenconfigAftNextHopPushedMplsLabelStack_GRIBIAFT_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_IPV6_EXPLICIT_NULL      OpenconfigAftNextHopPushedMplsLabelStack = 3
	OpenconfigAftNextHopPushedMplsLabelStack_GRIBIAFT_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_IMPLICIT_NULL           OpenconfigAftNextHopPushedMplsLabelStack = 4
	OpenconfigAftNextHopPushedMplsLabelStack_GRIBIAFT_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_ENTROPY_LABEL_INDICATOR OpenconfigAftNextHopPushedMplsLabelStack = 8
	OpenconfigAftNextHopPushedMplsLabelStack_GRIBIAFT_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_NO_LABEL                OpenconfigAftNextHopPushedMplsLabelStack = 9
)

// Enum value maps for OpenconfigAftNextHopPushedMplsLabelStack.
var (
	OpenconfigAftNextHopPushedMplsLabelStack_name = map[int32]string{
		0: "GRIBIAFT_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_UNSET",
		1: "GRIBIAFT_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_IPV4_EXPLICIT_NULL",
		2: "GRIBIAFT_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_ROUTER_ALERT",
		3: "GRIBIAFT_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_IPV6_EXPLICIT_NULL",
		4: "GRIBIAFT_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_IMPLICIT_NULL",
		8: "GRIBIAFT_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_ENTROPY_LABEL_INDICATOR",
		9: "GRIBIAFT_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_NO_LABEL",
	}
	OpenconfigAftNextHopPushedMplsLabelStack_value = map[string]int32{
		"GRIBIAFT_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_UNSET":                   0,
		"GRIBIAFT_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_IPV4_EXPLICIT_NULL":      1,
		"GRIBIAFT_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_ROUTER_ALERT":            2,
		"GRIBIAFT_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_IPV6_EXPLICIT_NULL":      3,
		"GRIBIAFT_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_IMPLICIT_NULL":           4,
		"GRIBIAFT_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_ENTROPY_LABEL_INDICATOR": 8,
		"GRIBIAFT_AFTS_NEXTHOPS_NEXTHOP_STATE_PUSHEDMPLSLABELSTACK_NO_LABEL":                9,
	}
)

func (x OpenconfigAftNextHopPushedMplsLabelStack) Enum() *OpenconfigAftNextHopPushedMplsLabelStack {
	p := new(OpenconfigAftNextHopPushedMplsLabelStack)
	*p = x
	return p
}

func (x OpenconfigAftNextHopPushedMplsLabelStack) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAftNextHopPushedMplsLabelStack) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_gribi_aft_enums_enums_proto_enumTypes[3].Descriptor()
}

func (OpenconfigAftNextHopPushedMplsLabelStack) Type() protoreflect.EnumType {
	return &file_proto_gribi_aft_enums_enums_proto_enumTypes[3]
}

func (x OpenconfigAftNextHopPushedMplsLabelStack) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAftNextHopPushedMplsLabelStack.Descriptor instead.
func (OpenconfigAftNextHopPushedMplsLabelStack) EnumDescriptor() ([]byte, []int) {
	return file_proto_gribi_aft_enums_enums_proto_rawDescGZIP(), []int{3}
}

// OpenconfigAftPolicyForwardingEntryMplsLabel represents an enumerated type generated for the YANG enumerated type mpls-label.
type OpenconfigAftPolicyForwardingEntryMplsLabel int32

const (
	OpenconfigAftPolicyForwardingEntryMplsLabel_GRIBIAFT_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_UNSET                   OpenconfigAftPolicyForwardingEntryMplsLabel = 0
	OpenconfigAftPolicyForwardingEntryMplsLabel_GRIBIAFT_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_IPV4_EXPLICIT_NULL      OpenconfigAftPolicyForwardingEntryMplsLabel = 1
	OpenconfigAftPolicyForwardingEntryMplsLabel_GRIBIAFT_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_ROUTER_ALERT            OpenconfigAftPolicyForwardingEntryMplsLabel = 2
	OpenconfigAftPolicyForwardingEntryMplsLabel_GRIBIAFT_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_IPV6_EXPLICIT_NULL      OpenconfigAftPolicyForwardingEntryMplsLabel = 3
	OpenconfigAftPolicyForwardingEntryMplsLabel_GRIBIAFT_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_IMPLICIT_NULL           OpenconfigAftPolicyForwardingEntryMplsLabel = 4
	OpenconfigAftPolicyForwardingEntryMplsLabel_GRIBIAFT_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_ENTROPY_LABEL_INDICATOR OpenconfigAftPolicyForwardingEntryMplsLabel = 8
	OpenconfigAftPolicyForwardingEntryMplsLabel_GRIBIAFT_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_NO_LABEL                OpenconfigAftPolicyForwardingEntryMplsLabel = 9
)

// Enum value maps for OpenconfigAftPolicyForwardingEntryMplsLabel.
var (
	OpenconfigAftPolicyForwardingEntryMplsLabel_name = map[int32]string{
		0: "GRIBIAFT_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_UNSET",
		1: "GRIBIAFT_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_IPV4_EXPLICIT_NULL",
		2: "GRIBIAFT_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_ROUTER_ALERT",
		3: "GRIBIAFT_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_IPV6_EXPLICIT_NULL",
		4: "GRIBIAFT_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_IMPLICIT_NULL",
		8: "GRIBIAFT_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_ENTROPY_LABEL_INDICATOR",
		9: "GRIBIAFT_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_NO_LABEL",
	}
	OpenconfigAftPolicyForwardingEntryMplsLabel_value = map[string]int32{
		"GRIBIAFT_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_UNSET":                   0,
		"GRIBIAFT_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_IPV4_EXPLICIT_NULL":      1,
		"GRIBIAFT_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_ROUTER_ALERT":            2,
		"GRIBIAFT_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_IPV6_EXPLICIT_NULL":      3,
		"GRIBIAFT_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_IMPLICIT_NULL":           4,
		"GRIBIAFT_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_ENTROPY_LABEL_INDICATOR": 8,
		"GRIBIAFT_AFTS_POLICYFORWARDING_POLICYFORWARDINGENTRY_CONFIG_MPLSLABEL_NO_LABEL":                9,
	}
)

func (x OpenconfigAftPolicyForwardingEntryMplsLabel) Enum() *OpenconfigAftPolicyForwardingEntryMplsLabel {
	p := new(OpenconfigAftPolicyForwardingEntryMplsLabel)
	*p = x
	return p
}

func (x OpenconfigAftPolicyForwardingEntryMplsLabel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigAftPolicyForwardingEntryMplsLabel) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_gribi_aft_enums_enums_proto_enumTypes[4].Descriptor()
}

func (OpenconfigAftPolicyForwardingEntryMplsLabel) Type() protoreflect.EnumType {
	return &file_proto_gribi_aft_enums_enums_proto_enumTypes[4]
}

func (x OpenconfigAftPolicyForwardingEntryMplsLabel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigAftPolicyForwardingEntryMplsLabel.Descriptor instead.
func (OpenconfigAftPolicyForwardingEntryMplsLabel) EnumDescriptor() ([]byte, []int) {
	return file_proto_gribi_aft_enums_enums_proto_rawDescGZIP(), []int{4}
}

// OpenconfigPacketMatchTypesIPPROTOCOL represents an enumerated type generated for the YANG identity IP_PROTOCOL.
type OpenconfigPacketMatchTypesIPPROTOCOL int32

const (
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_UNSET   OpenconfigPacketMatchTypesIPPROTOCOL = 0
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_GRE  OpenconfigPacketMatchTypesIPPROTOCOL = 24050007
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_TCP  OpenconfigPacketMatchTypesIPPROTOCOL = 38721802
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_L2TP OpenconfigPacketMatchTypesIPPROTOCOL = 81903923
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_AUTH OpenconfigPacketMatchTypesIPPROTOCOL = 203904199
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_PIM  OpenconfigPacketMatchTypesIPPROTOCOL = 272904165
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_IGMP OpenconfigPacketMatchTypesIPPROTOCOL = 512271866
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_ICMP OpenconfigPacketMatchTypesIPPROTOCOL = 512860246
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_UDP  OpenconfigPacketMatchTypesIPPROTOCOL = 525100026
	OpenconfigPacketMatchTypesIPPROTOCOL_OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_RSVP OpenconfigPacketMatchTypesIPPROTOCOL = 530070378
)

// Enum value maps for OpenconfigPacketMatchTypesIPPROTOCOL.
var (
	OpenconfigPacketMatchTypesIPPROTOCOL_name = map[int32]string{
		0:         "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_UNSET",
		24050007:  "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_GRE",
		38721802:  "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_TCP",
		81903923:  "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_L2TP",
		203904199: "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_AUTH",
		272904165: "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_PIM",
		512271866: "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_IGMP",
		512860246: "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_ICMP",
		525100026: "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_UDP",
		530070378: "OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_RSVP",
	}
	OpenconfigPacketMatchTypesIPPROTOCOL_value = map[string]int32{
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_UNSET":   0,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_GRE":  24050007,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_TCP":  38721802,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_L2TP": 81903923,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_AUTH": 203904199,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_PIM":  272904165,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_IGMP": 512271866,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_ICMP": 512860246,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_UDP":  525100026,
		"OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP_RSVP": 530070378,
	}
)

func (x OpenconfigPacketMatchTypesIPPROTOCOL) Enum() *OpenconfigPacketMatchTypesIPPROTOCOL {
	p := new(OpenconfigPacketMatchTypesIPPROTOCOL)
	*p = x
	return p
}

func (x OpenconfigPacketMatchTypesIPPROTOCOL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPacketMatchTypesIPPROTOCOL) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_gribi_aft_enums_enums_proto_enumTypes[5].Descriptor()
}

func (OpenconfigPacketMatchTypesIPPROTOCOL) Type() protoreflect.EnumType {
	return &file_proto_gribi_aft_enums_enums_proto_enumTypes[5]
}

func (x OpenconfigPacketMatchTypesIPPROTOCOL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPacketMatchTypesIPPROTOCOL.Descriptor instead.
func (OpenconfigPacketMatchTypesIPPROTOCOL) EnumDescriptor() ([]byte, []int) {
	return file_proto_gribi_aft_enums_enums_proto_rawDescGZIP(), []int{5}
}

// OpenconfigPolicyTypesINSTALLPROTOCOLTYPE represents an enumerated type generated for the YANG identity INSTALL_PROTOCOL_TYPE.
type OpenconfigPolicyTypesINSTALLPROTOCOLTYPE int32

const (
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_UNSET              OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 0
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_STATIC             OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 164198026
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_LOCAL_AGGREGATE    OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 167243989
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF               OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 187006448
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_ISIS               OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 308545656
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_BGP                OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 436650411
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_DIRECTLY_CONNECTED OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 463126862
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF3              OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 470106339
)

// Enum value maps for OpenconfigPolicyTypesINSTALLPROTOCOLTYPE.
var (
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_name = map[int32]string{
		0:         "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_UNSET",
		164198026: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_STATIC",
		167243989: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_LOCAL_AGGREGATE",
		187006448: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF",
		308545656: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_ISIS",
		436650411: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_BGP",
		463126862: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_DIRECTLY_CONNECTED",
		470106339: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF3",
	}
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_value = map[string]int32{
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_UNSET":              0,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_STATIC":             164198026,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_LOCAL_AGGREGATE":    167243989,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF":               187006448,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_ISIS":               308545656,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_BGP":                436650411,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_DIRECTLY_CONNECTED": 463126862,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF3":              470106339,
	}
)

func (x OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) Enum() *OpenconfigPolicyTypesINSTALLPROTOCOLTYPE {
	p := new(OpenconfigPolicyTypesINSTALLPROTOCOLTYPE)
	*p = x
	return p
}

func (x OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_gribi_aft_enums_enums_proto_enumTypes[6].Descriptor()
}

func (OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) Type() protoreflect.EnumType {
	return &file_proto_gribi_aft_enums_enums_proto_enumTypes[6]
}

func (x OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPolicyTypesINSTALLPROTOCOLTYPE.Descriptor instead.
func (OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) EnumDescriptor() ([]byte, []int) {
	return file_proto_gribi_aft_enums_enums_proto_rawDescGZIP(), []int{6}
}

var File_proto_gribi_aft_enums_enums_proto protoreflect.FileDescriptor

var file_proto_gribi_aft_enums_enums_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66,
	0x74, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x1a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x79, 0x67, 0x6f, 0x74,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2f,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x79, 0x67, 0x6f, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x79, 0x65, 0x78, 0x74, 0x2f, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2a, 0xb4, 0x02, 0x0a, 0x24, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41,
	0x66, 0x74, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x46, 0x54, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53,
	0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x28, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x46, 0x54, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53,
	0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x52, 0x45, 0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x47, 0x52, 0x45, 0x12,
	0x36, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x46, 0x54,
	0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x48, 0x45, 0x41,
	0x44, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x02, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x34, 0x12, 0x36, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x46, 0x54, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x50, 0x56, 0x36, 0x10, 0x03, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x50, 0x56, 0x36, 0x12,
	0x36, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x46, 0x54,
	0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x48, 0x45, 0x41,
	0x44, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x04, 0x1a, 0x07,
	0x82, 0x41, 0x04, 0x4d, 0x50, 0x4c, 0x53, 0x2a, 0xd0, 0x04, 0x0a, 0x1c, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x66, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x30, 0x47, 0x52, 0x49, 0x42,
	0x49, 0x41, 0x46, 0x54, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x58,
	0x0a, 0x3d, 0x47, 0x52, 0x49, 0x42, 0x49, 0x41, 0x46, 0x54, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f,
	0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x50, 0x56,
	0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10,
	0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49,
	0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x4c, 0x0a, 0x37, 0x47, 0x52, 0x49, 0x42,
	0x49, 0x41, 0x46, 0x54, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52,
	0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x12, 0x58, 0x0a, 0x3d, 0x47, 0x52, 0x49, 0x42, 0x49, 0x41,
	0x46, 0x54, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43,
	0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50,
	0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x12, 0x4e, 0x0a, 0x38, 0x47, 0x52, 0x49, 0x42, 0x49, 0x41, 0x46, 0x54, 0x5f, 0x41, 0x46, 0x54,
	0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49,
	0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x04, 0x1a, 0x10,
	0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x12, 0x62, 0x0a, 0x42, 0x47, 0x52, 0x49, 0x42, 0x49, 0x41, 0x46, 0x54, 0x5f, 0x41, 0x46, 0x54,
	0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x45,
	0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44,
	0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x08, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x45, 0x4e, 0x54,
	0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43,
	0x41, 0x54, 0x4f, 0x52, 0x12, 0x44, 0x0a, 0x33, 0x47, 0x52, 0x49, 0x42, 0x49, 0x41, 0x46, 0x54,
	0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x09, 0x1a, 0x0b, 0x82,
	0x41, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x2a, 0xc1, 0x05, 0x0a, 0x2b, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x66, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4d, 0x70, 0x6c, 0x73,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x42, 0x0a, 0x3e, 0x47, 0x52,
	0x49, 0x42, 0x49, 0x41, 0x46, 0x54, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x66,
	0x0a, 0x4b, 0x47, 0x52, 0x49, 0x42, 0x49, 0x41, 0x46, 0x54, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f,
	0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x4d, 0x50, 0x4c, 0x53,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f,
	0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a,
	0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x5a, 0x0a, 0x45, 0x47, 0x52, 0x49, 0x42, 0x49, 0x41,
	0x46, 0x54, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f,
	0x50, 0x50, 0x45, 0x44, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x54, 0x41,
	0x43, 0x4b, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10,
	0x02, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45,
	0x52, 0x54, 0x12, 0x66, 0x0a, 0x4b, 0x47, 0x52, 0x49, 0x42, 0x49, 0x41, 0x46, 0x54, 0x5f, 0x41,
	0x46, 0x54, 0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49,
	0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50,
	0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x5c, 0x0a, 0x46, 0x47, 0x52,
	0x49, 0x42, 0x49, 0x41, 0x46, 0x54, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f,
	0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49,
	0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x70, 0x0a, 0x50, 0x47, 0x52, 0x49, 0x42,
	0x49, 0x41, 0x46, 0x54, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x50, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53,
	0x54, 0x41, 0x43, 0x4b, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x08, 0x1a, 0x1a,
	0x82, 0x41, 0x17, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x12, 0x52, 0x0a, 0x41, 0x47, 0x52,
	0x49, 0x42, 0x49, 0x41, 0x46, 0x54, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10,
	0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x2a, 0xc5,
	0x05, 0x0a, 0x28, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x66, 0x74,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x70, 0x6c,
	0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x43, 0x0a, 0x3f, 0x47,
	0x52, 0x49, 0x42, 0x49, 0x41, 0x46, 0x54, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4e, 0x45, 0x58,
	0x54, 0x48, 0x4f, 0x50, 0x53, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x45, 0x44, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x67, 0x0a, 0x4c, 0x47, 0x52, 0x49, 0x42, 0x49, 0x41, 0x46, 0x54, 0x5f, 0x41, 0x46, 0x54,
	0x53, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x53, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48,
	0x4f, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x45, 0x44, 0x4d,
	0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x50,
	0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x10, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c,
	0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x5b, 0x0a, 0x46, 0x47, 0x52, 0x49,
	0x42, 0x49, 0x41, 0x46, 0x54, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48,
	0x4f, 0x50, 0x53, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x45, 0x44, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52,
	0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x12, 0x67, 0x0a, 0x4c, 0x47, 0x52, 0x49, 0x42, 0x49, 0x41,
	0x46, 0x54, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x53,
	0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50,
	0x55, 0x53, 0x48, 0x45, 0x44, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56,
	0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12,
	0x5d, 0x0a, 0x47, 0x47, 0x52, 0x49, 0x42, 0x49, 0x41, 0x46, 0x54, 0x5f, 0x41, 0x46, 0x54, 0x53,
	0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x53, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f,
	0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x45, 0x44, 0x4d, 0x50,
	0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x4d, 0x50,
	0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41,
	0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x71,
	0x0a, 0x51, 0x47, 0x52, 0x49, 0x42, 0x49, 0x41, 0x46, 0x54, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f,
	0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x53, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x45, 0x44, 0x4d, 0x50, 0x4c,
	0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x45, 0x4e, 0x54, 0x52,
	0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41,
	0x54, 0x4f, 0x52, 0x10, 0x08, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50,
	0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f,
	0x52, 0x12, 0x53, 0x0a, 0x42, 0x47, 0x52, 0x49, 0x42, 0x49, 0x41, 0x46, 0x54, 0x5f, 0x41, 0x46,
	0x54, 0x53, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x53, 0x5f, 0x4e, 0x45, 0x58, 0x54,
	0x48, 0x4f, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x45, 0x44,
	0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4e,
	0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x2a, 0x9c, 0x06, 0x0a, 0x2b, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x66, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x70, 0x6c,
	0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x4f, 0x0a, 0x4b, 0x47, 0x52, 0x49, 0x42, 0x49, 0x41,
	0x46, 0x54, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f,
	0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46,
	0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x73, 0x0a, 0x58, 0x47, 0x52, 0x49, 0x42, 0x49,
	0x41, 0x46, 0x54, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46,
	0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e,
	0x55, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45,
	0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x67, 0x0a, 0x52,
	0x47, 0x52, 0x49, 0x42, 0x49, 0x41, 0x46, 0x54, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x50, 0x4c, 0x53,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45,
	0x52, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f,
	0x41, 0x4c, 0x45, 0x52, 0x54, 0x12, 0x73, 0x0a, 0x58, 0x47, 0x52, 0x49, 0x42, 0x49, 0x41, 0x46,
	0x54, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52,
	0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f,
	0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49,
	0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x03, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50,
	0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x69, 0x0a, 0x53, 0x47, 0x52,
	0x49, 0x42, 0x49, 0x41, 0x46, 0x54, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x45, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x12, 0x7d, 0x0a, 0x5d, 0x47, 0x52, 0x49, 0x42, 0x49, 0x41, 0x46,
	0x54, 0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52,
	0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f,
	0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x45,
	0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44,
	0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x08, 0x1a, 0x1a, 0x82, 0x41, 0x17, 0x45, 0x4e, 0x54,
	0x52, 0x4f, 0x50, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43,
	0x41, 0x54, 0x4f, 0x52, 0x12, 0x5f, 0x0a, 0x4e, 0x47, 0x52, 0x49, 0x42, 0x49, 0x41, 0x46, 0x54,
	0x5f, 0x41, 0x46, 0x54, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52, 0x57,
	0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x46, 0x4f, 0x52,
	0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x4e, 0x4f,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x09, 0x1a, 0x0b, 0x82, 0x41, 0x08, 0x4e, 0x4f, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x2a, 0x9c, 0x05, 0x0a, 0x24, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x12, 0x2e,
	0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x3d,
	0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x47, 0x52, 0x45, 0x10, 0xd7, 0xf2,
	0xbb, 0x0b, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x49, 0x50, 0x5f, 0x47, 0x52, 0x45, 0x12, 0x3d, 0x0a,
	0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x8a, 0xb2, 0xbb,
	0x12, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x49, 0x50, 0x5f, 0x54, 0x43, 0x50, 0x12, 0x3f, 0x0a, 0x2c,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x4c, 0x32, 0x54, 0x50, 0x10, 0xb3, 0x82, 0x87,
	0x27, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x50, 0x5f, 0x4c, 0x32, 0x54, 0x50, 0x12, 0x3f, 0x0a,
	0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0xc7, 0xa9,
	0x9d, 0x61, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x50, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x12, 0x3e,
	0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x50, 0x49, 0x4d, 0x10, 0xe5, 0xdf,
	0x90, 0x82, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x49, 0x50, 0x5f, 0x50, 0x49, 0x4d, 0x12, 0x40,
	0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x49, 0x47, 0x4d, 0x50, 0x10, 0xfa,
	0xcb, 0xa2, 0xf4, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x50, 0x5f, 0x49, 0x47, 0x4d, 0x50,
	0x12, 0x40, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x50,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x49, 0x43, 0x4d, 0x50,
	0x10, 0xd6, 0xc0, 0xc6, 0xf4, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x50, 0x5f, 0x49, 0x43,
	0x4d, 0x50, 0x12, 0x3e, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x55, 0x44,
	0x50, 0x10, 0xfa, 0xc7, 0xb1, 0xfa, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x49, 0x50, 0x5f, 0x55,
	0x44, 0x50, 0x12, 0x40, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x52, 0x53,
	0x56, 0x50, 0x10, 0xea, 0xf6, 0xe0, 0xfc, 0x01, 0x1a, 0x0a, 0x82, 0x41, 0x07, 0x49, 0x50, 0x5f,
	0x52, 0x53, 0x56, 0x50, 0x2a, 0xd1, 0x04, 0x0a, 0x28, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x32, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c,
	0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x41, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x8a, 0xed, 0xa5, 0x4e, 0x1a, 0x09, 0x82,
	0x41, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x12, 0x53, 0x0a, 0x38, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45,
	0x47, 0x41, 0x54, 0x45, 0x10, 0xd5, 0xe1, 0xdf, 0x4f, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x4c, 0x4f,
	0x43, 0x41, 0x4c, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x12, 0x3d, 0x0a,
	0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x10, 0xf0,
	0xfb, 0x95, 0x59, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4f, 0x53, 0x50, 0x46, 0x12, 0x3e, 0x0a, 0x2d,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x10, 0xf8, 0x90,
	0x90, 0x93, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x53, 0x49, 0x53, 0x12, 0x3c, 0x0a, 0x2c,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x47, 0x50, 0x10, 0xab, 0x83, 0x9b,
	0xd0, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x42, 0x47, 0x50, 0x12, 0x5a, 0x0a, 0x3b, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4c, 0x59, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0xce, 0x82, 0xeb, 0xdc, 0x01, 0x1a,
	0x15, 0x82, 0x41, 0x12, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x12, 0x40, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x33, 0x10, 0xe3, 0x81, 0x95, 0xe0, 0x01, 0x1a, 0x08,
	0x82, 0x41, 0x05, 0x4f, 0x53, 0x50, 0x46, 0x33, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x67, 0x72, 0x69, 0x62, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x72,
	0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_gribi_aft_enums_enums_proto_rawDescOnce sync.Once
	file_proto_gribi_aft_enums_enums_proto_rawDescData = file_proto_gribi_aft_enums_enums_proto_rawDesc
)

func file_proto_gribi_aft_enums_enums_proto_rawDescGZIP() []byte {
	file_proto_gribi_aft_enums_enums_proto_rawDescOnce.Do(func() {
		file_proto_gribi_aft_enums_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_gribi_aft_enums_enums_proto_rawDescData)
	})
	return file_proto_gribi_aft_enums_enums_proto_rawDescData
}

var file_proto_gribi_aft_enums_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_proto_gribi_aft_enums_enums_proto_goTypes = []interface{}{
	(OpenconfigAftEncapsulationHeaderType)(0),        // 0: gribi_aft.enums.OpenconfigAftEncapsulationHeaderType
	(OpenconfigAftLabelEntryLabel)(0),                // 1: gribi_aft.enums.OpenconfigAftLabelEntryLabel
	(OpenconfigAftLabelEntryPoppedMplsLabelStack)(0), // 2: gribi_aft.enums.OpenconfigAftLabelEntryPoppedMplsLabelStack
	(OpenconfigAftNextHopPushedMplsLabelStack)(0),    // 3: gribi_aft.enums.OpenconfigAftNextHopPushedMplsLabelStack
	(OpenconfigAftPolicyForwardingEntryMplsLabel)(0), // 4: gribi_aft.enums.OpenconfigAftPolicyForwardingEntryMplsLabel
	(OpenconfigPacketMatchTypesIPPROTOCOL)(0),        // 5: gribi_aft.enums.OpenconfigPacketMatchTypesIPPROTOCOL
	(OpenconfigPolicyTypesINSTALLPROTOCOLTYPE)(0),    // 6: gribi_aft.enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE
}
var file_proto_gribi_aft_enums_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_gribi_aft_enums_enums_proto_init() }
func file_proto_gribi_aft_enums_enums_proto_init() {
	if File_proto_gribi_aft_enums_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_gribi_aft_enums_enums_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_gribi_aft_enums_enums_proto_goTypes,
		DependencyIndexes: file_proto_gribi_aft_enums_enums_proto_depIdxs,
		EnumInfos:         file_proto_gribi_aft_enums_enums_proto_enumTypes,
	}.Build()
	File_proto_gribi_aft_enums_enums_proto = out.File
	file_proto_gribi_aft_enums_enums_proto_rawDesc = nil
	file_proto_gribi_aft_enums_enums_proto_goTypes = nil
	file_proto_gribi_aft_enums_enums_proto_depIdxs = nil
}
