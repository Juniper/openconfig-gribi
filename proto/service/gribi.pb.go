// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/openconfig/gribi/proto/service/gribi.proto

/*
Package gribi is a generated protocol buffer package.

It is generated from these files:
	github.com/openconfig/gribi/proto/service/gribi.proto

It has these top-level messages:
	ModifyRequest
	AFTOperation
	ModifyResponse
	AFTResult
*/
package gribi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import gribi_aft "github.com/openconfig/gribi/proto/gribi_aft"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The operation that this request is - either add, replace, or delete
// any entry from the specific AFT.
type AFTOperation_Operation int32

const (
	// INVALID indicates that the sender did not set the operation, and
	// should be considered an error.
	AFTOperation_INVALID AFTOperation_Operation = 0
	// ADD creates an entry within the table, it should fail if the entry
	// already exists.
	AFTOperation_ADD AFTOperation_Operation = 1
	// REPLACE replaces an existing entry within a table, it should fail if
	// the entry does not exist. A replace operation should contain all of
	// the relevant fields, such that existing entry is completely replaced
	// with the specified entry.
	AFTOperation_REPLACE AFTOperation_Operation = 2
	// DELETE removes an entry from the table, it should fail if the entry
	// does not exist.
	AFTOperation_DELETE AFTOperation_Operation = 3
)

var AFTOperation_Operation_name = map[int32]string{
	0: "INVALID",
	1: "ADD",
	2: "REPLACE",
	3: "DELETE",
}
var AFTOperation_Operation_value = map[string]int32{
	"INVALID": 0,
	"ADD":     1,
	"REPLACE": 2,
	"DELETE":  3,
}

func (x AFTOperation_Operation) String() string {
	return proto.EnumName(AFTOperation_Operation_name, int32(x))
}
func (AFTOperation_Operation) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

// Status of the operation. Since this is within a
// stream we do not use status.proto to respond since
// this would fail the entire RPC connection, and hence
// have in-band errors.
type AFTResult_Status int32

const (
	AFTResult_UNSET  AFTResult_Status = 0
	AFTResult_OK     AFTResult_Status = 1
	AFTResult_FAILED AFTResult_Status = 2
)

var AFTResult_Status_name = map[int32]string{
	0: "UNSET",
	1: "OK",
	2: "FAILED",
}
var AFTResult_Status_value = map[string]int32{
	"UNSET":  0,
	"OK":     1,
	"FAILED": 2,
}

func (x AFTResult_Status) String() string {
	return proto.EnumName(AFTResult_Status_name, int32(x))
}
func (AFTResult_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

// ModifyRequest is a message used by the client to manipulate the state of
// the RIB on the target device.
type ModifyRequest struct {
	// A group of requests to add/modify/remove a single AFT entry
	Operation []*AFTOperation `protobuf:"bytes,1,rep,name=operation" json:"operation,omitempty"`
}

func (m *ModifyRequest) Reset()                    { *m = ModifyRequest{} }
func (m *ModifyRequest) String() string            { return proto.CompactTextString(m) }
func (*ModifyRequest) ProtoMessage()               {}
func (*ModifyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ModifyRequest) GetOperation() []*AFTOperation {
	if m != nil {
		return m.Operation
	}
	return nil
}

// A single request to add/modify/remove a single AFT entry
type AFTOperation struct {
	// Associate an ID with this specific request since this allows the client
	// to determine exactly which modifications have been completed in the
	// case that are multiple operations within the AFT.
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Network Instance (aka vrf aka routing-instance) to apply to
	NetworkInstance string                 `protobuf:"bytes,2,opt,name=network_instance,json=networkInstance" json:"network_instance,omitempty"`
	Op              AFTOperation_Operation `protobuf:"varint,3,opt,name=op,enum=gribi.AFTOperation_Operation" json:"op,omitempty"`
	// Types that are valid to be assigned to Entry:
	//	*AFTOperation_Ipv4
	//	*AFTOperation_Ipv6
	//	*AFTOperation_Mpls
	//	*AFTOperation_NextHopGroup
	//	*AFTOperation_NextHop
	Entry isAFTOperation_Entry `protobuf_oneof:"entry"`
}

func (m *AFTOperation) Reset()                    { *m = AFTOperation{} }
func (m *AFTOperation) String() string            { return proto.CompactTextString(m) }
func (*AFTOperation) ProtoMessage()               {}
func (*AFTOperation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isAFTOperation_Entry interface {
	isAFTOperation_Entry()
}

type AFTOperation_Ipv4 struct {
	Ipv4 *gribi_aft.Afts_Ipv4Entry `protobuf:"bytes,4,opt,name=ipv4,oneof"`
}
type AFTOperation_Ipv6 struct {
	Ipv6 *gribi_aft.Afts_Ipv6Entry `protobuf:"bytes,5,opt,name=ipv6,oneof"`
}
type AFTOperation_Mpls struct {
	Mpls *gribi_aft.Afts_LabelEntry `protobuf:"bytes,6,opt,name=mpls,oneof"`
}
type AFTOperation_NextHopGroup struct {
	NextHopGroup *gribi_aft.Afts_NextHopGroup `protobuf:"bytes,7,opt,name=next_hop_group,json=nextHopGroup,oneof"`
}
type AFTOperation_NextHop struct {
	NextHop *gribi_aft.Afts_NextHop `protobuf:"bytes,8,opt,name=next_hop,json=nextHop,oneof"`
}

func (*AFTOperation_Ipv4) isAFTOperation_Entry()         {}
func (*AFTOperation_Ipv6) isAFTOperation_Entry()         {}
func (*AFTOperation_Mpls) isAFTOperation_Entry()         {}
func (*AFTOperation_NextHopGroup) isAFTOperation_Entry() {}
func (*AFTOperation_NextHop) isAFTOperation_Entry()      {}

func (m *AFTOperation) GetEntry() isAFTOperation_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *AFTOperation) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AFTOperation) GetNetworkInstance() string {
	if m != nil {
		return m.NetworkInstance
	}
	return ""
}

func (m *AFTOperation) GetOp() AFTOperation_Operation {
	if m != nil {
		return m.Op
	}
	return AFTOperation_INVALID
}

func (m *AFTOperation) GetIpv4() *gribi_aft.Afts_Ipv4Entry {
	if x, ok := m.GetEntry().(*AFTOperation_Ipv4); ok {
		return x.Ipv4
	}
	return nil
}

func (m *AFTOperation) GetIpv6() *gribi_aft.Afts_Ipv6Entry {
	if x, ok := m.GetEntry().(*AFTOperation_Ipv6); ok {
		return x.Ipv6
	}
	return nil
}

func (m *AFTOperation) GetMpls() *gribi_aft.Afts_LabelEntry {
	if x, ok := m.GetEntry().(*AFTOperation_Mpls); ok {
		return x.Mpls
	}
	return nil
}

func (m *AFTOperation) GetNextHopGroup() *gribi_aft.Afts_NextHopGroup {
	if x, ok := m.GetEntry().(*AFTOperation_NextHopGroup); ok {
		return x.NextHopGroup
	}
	return nil
}

func (m *AFTOperation) GetNextHop() *gribi_aft.Afts_NextHop {
	if x, ok := m.GetEntry().(*AFTOperation_NextHop); ok {
		return x.NextHop
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AFTOperation) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AFTOperation_OneofMarshaler, _AFTOperation_OneofUnmarshaler, _AFTOperation_OneofSizer, []interface{}{
		(*AFTOperation_Ipv4)(nil),
		(*AFTOperation_Ipv6)(nil),
		(*AFTOperation_Mpls)(nil),
		(*AFTOperation_NextHopGroup)(nil),
		(*AFTOperation_NextHop)(nil),
	}
}

func _AFTOperation_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AFTOperation)
	// entry
	switch x := m.Entry.(type) {
	case *AFTOperation_Ipv4:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ipv4); err != nil {
			return err
		}
	case *AFTOperation_Ipv6:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ipv6); err != nil {
			return err
		}
	case *AFTOperation_Mpls:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mpls); err != nil {
			return err
		}
	case *AFTOperation_NextHopGroup:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NextHopGroup); err != nil {
			return err
		}
	case *AFTOperation_NextHop:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NextHop); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AFTOperation.Entry has unexpected type %T", x)
	}
	return nil
}

func _AFTOperation_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AFTOperation)
	switch tag {
	case 4: // entry.ipv4
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gribi_aft.Afts_Ipv4Entry)
		err := b.DecodeMessage(msg)
		m.Entry = &AFTOperation_Ipv4{msg}
		return true, err
	case 5: // entry.ipv6
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gribi_aft.Afts_Ipv6Entry)
		err := b.DecodeMessage(msg)
		m.Entry = &AFTOperation_Ipv6{msg}
		return true, err
	case 6: // entry.mpls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gribi_aft.Afts_LabelEntry)
		err := b.DecodeMessage(msg)
		m.Entry = &AFTOperation_Mpls{msg}
		return true, err
	case 7: // entry.next_hop_group
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gribi_aft.Afts_NextHopGroup)
		err := b.DecodeMessage(msg)
		m.Entry = &AFTOperation_NextHopGroup{msg}
		return true, err
	case 8: // entry.next_hop
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gribi_aft.Afts_NextHop)
		err := b.DecodeMessage(msg)
		m.Entry = &AFTOperation_NextHop{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AFTOperation_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AFTOperation)
	// entry
	switch x := m.Entry.(type) {
	case *AFTOperation_Ipv4:
		s := proto.Size(x.Ipv4)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AFTOperation_Ipv6:
		s := proto.Size(x.Ipv6)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AFTOperation_Mpls:
		s := proto.Size(x.Mpls)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AFTOperation_NextHopGroup:
		s := proto.Size(x.NextHopGroup)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AFTOperation_NextHop:
		s := proto.Size(x.NextHop)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A set of AFT responses.
type ModifyResponse struct {
	// One or more responses to requests. Clients should expect that
	// the ModifyResponse *does not* correlate to the ModifyRequest’s
	// contents.
	Result []*AFTResult `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *ModifyResponse) Reset()                    { *m = ModifyResponse{} }
func (m *ModifyResponse) String() string            { return proto.CompactTextString(m) }
func (*ModifyResponse) ProtoMessage()               {}
func (*ModifyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ModifyResponse) GetResult() []*AFTResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// A response to add/modify/remove a single AFT entry
type AFTResult struct {
	// The ID corresponds to the operation ID that was
	// specified in the AFTOperation.
	Id     uint64           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Status AFTResult_Status `protobuf:"varint,2,opt,name=status,enum=gribi.AFTResult_Status" json:"status,omitempty"`
}

func (m *AFTResult) Reset()                    { *m = AFTResult{} }
func (m *AFTResult) String() string            { return proto.CompactTextString(m) }
func (*AFTResult) ProtoMessage()               {}
func (*AFTResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AFTResult) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AFTResult) GetStatus() AFTResult_Status {
	if m != nil {
		return m.Status
	}
	return AFTResult_UNSET
}

func init() {
	proto.RegisterType((*ModifyRequest)(nil), "gribi.ModifyRequest")
	proto.RegisterType((*AFTOperation)(nil), "gribi.AFTOperation")
	proto.RegisterType((*ModifyResponse)(nil), "gribi.ModifyResponse")
	proto.RegisterType((*AFTResult)(nil), "gribi.AFTResult")
	proto.RegisterEnum("gribi.AFTOperation_Operation", AFTOperation_Operation_name, AFTOperation_Operation_value)
	proto.RegisterEnum("gribi.AFTResult_Status", AFTResult_Status_name, AFTResult_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GRIBI service

type GRIBIClient interface {
	// Modify provides a bidirectional streaming RPC that can be used to issue
	// modifications to the AFT in the form of ModifyRequest(s).
	// The network element responds (asynchronously) with a ModifyResponse
	// for each ModifyRequest indicating what action was taken, once each
	// Operation within the request has been completed.
	Modify(ctx context.Context, opts ...grpc.CallOption) (GRIBI_ModifyClient, error)
}

type gRIBIClient struct {
	cc *grpc.ClientConn
}

func NewGRIBIClient(cc *grpc.ClientConn) GRIBIClient {
	return &gRIBIClient{cc}
}

func (c *gRIBIClient) Modify(ctx context.Context, opts ...grpc.CallOption) (GRIBI_ModifyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GRIBI_serviceDesc.Streams[0], c.cc, "/gribi.gRIBI/Modify", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRIBIModifyClient{stream}
	return x, nil
}

type GRIBI_ModifyClient interface {
	Send(*ModifyRequest) error
	Recv() (*ModifyResponse, error)
	grpc.ClientStream
}

type gRIBIModifyClient struct {
	grpc.ClientStream
}

func (x *gRIBIModifyClient) Send(m *ModifyRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRIBIModifyClient) Recv() (*ModifyResponse, error) {
	m := new(ModifyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GRIBI service

type GRIBIServer interface {
	// Modify provides a bidirectional streaming RPC that can be used to issue
	// modifications to the AFT in the form of ModifyRequest(s).
	// The network element responds (asynchronously) with a ModifyResponse
	// for each ModifyRequest indicating what action was taken, once each
	// Operation within the request has been completed.
	Modify(GRIBI_ModifyServer) error
}

func RegisterGRIBIServer(s *grpc.Server, srv GRIBIServer) {
	s.RegisterService(&_GRIBI_serviceDesc, srv)
}

func _GRIBI_Modify_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRIBIServer).Modify(&gRIBIModifyServer{stream})
}

type GRIBI_ModifyServer interface {
	Send(*ModifyResponse) error
	Recv() (*ModifyRequest, error)
	grpc.ServerStream
}

type gRIBIModifyServer struct {
	grpc.ServerStream
}

func (x *gRIBIModifyServer) Send(m *ModifyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRIBIModifyServer) Recv() (*ModifyRequest, error) {
	m := new(ModifyRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GRIBI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gribi.gRIBI",
	HandlerType: (*GRIBIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Modify",
			Handler:       _GRIBI_Modify_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/openconfig/gribi/proto/service/gribi.proto",
}

func init() {
	proto.RegisterFile("github.com/openconfig/gribi/proto/service/gribi.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xdf, 0x8f, 0xd2, 0x40,
	0x10, 0xc7, 0x69, 0x81, 0x72, 0x0c, 0x27, 0x36, 0xab, 0xc6, 0x4a, 0x34, 0x21, 0x7d, 0xb1, 0x3e,
	0xd8, 0x9e, 0x88, 0x24, 0x9e, 0x4f, 0xc5, 0xf6, 0xa4, 0x11, 0x39, 0xb3, 0x87, 0xbe, 0x12, 0x7e,
	0x2c, 0xdc, 0x46, 0xae, 0xbb, 0x76, 0xb7, 0x78, 0xf7, 0x47, 0xfa, 0x3f, 0x19, 0xb6, 0xe5, 0x8a,
	0xe8, 0xe5, 0xde, 0x76, 0xbf, 0xf3, 0xfd, 0xcc, 0xce, 0x64, 0x66, 0xe1, 0xdd, 0x8a, 0xca, 0xcb,
	0x74, 0xe6, 0xce, 0xd9, 0x95, 0xc7, 0x38, 0x89, 0xe7, 0x2c, 0x5e, 0xd2, 0x95, 0xb7, 0x4a, 0xe8,
	0x8c, 0x7a, 0x3c, 0x61, 0x92, 0x79, 0x82, 0x24, 0x1b, 0x3a, 0x27, 0x99, 0xe6, 0x2a, 0x0d, 0x55,
	0xd5, 0xa5, 0xf5, 0xe1, 0x7e, 0x5a, 0x9d, 0x27, 0xd3, 0xa5, 0x2c, 0x4e, 0x59, 0x0e, 0xbb, 0x0f,
	0x0f, 0xbe, 0xb0, 0x05, 0x5d, 0xde, 0x60, 0xf2, 0x33, 0x25, 0x42, 0xa2, 0x37, 0x50, 0x67, 0x9c,
	0x24, 0x53, 0x49, 0x59, 0x6c, 0x69, 0xed, 0xb2, 0xd3, 0xe8, 0x3c, 0x72, 0xb3, 0x57, 0xfd, 0xb3,
	0xf1, 0xf9, 0x2e, 0x84, 0x0b, 0x97, 0xfd, 0xbb, 0x0c, 0xc7, 0xfb, 0x31, 0xd4, 0x04, 0x9d, 0x2e,
	0x2c, 0xad, 0xad, 0x39, 0x15, 0xac, 0xd3, 0x05, 0x7a, 0x05, 0x66, 0x4c, 0xe4, 0x2f, 0x96, 0xfc,
	0x98, 0xd0, 0x58, 0xc8, 0x69, 0x3c, 0x27, 0x96, 0xde, 0xd6, 0x9c, 0x3a, 0x7e, 0x98, 0xeb, 0x51,
	0x2e, 0xa3, 0xd7, 0xa0, 0x33, 0x6e, 0x95, 0xdb, 0x9a, 0xd3, 0xec, 0xbc, 0xf8, 0xcf, 0xbb, 0x6e,
	0x51, 0x81, 0xce, 0x38, 0xf2, 0xa0, 0x42, 0xf9, 0xa6, 0x6b, 0x55, 0xda, 0x9a, 0xd3, 0xe8, 0x3c,
	0x73, 0x8b, 0xf6, 0xfc, 0xa5, 0x14, 0x6e, 0xc4, 0x37, 0xdd, 0x30, 0x96, 0xc9, 0xcd, 0xa0, 0x84,
	0x95, 0x31, 0x07, 0x7a, 0x56, 0xf5, 0x4e, 0xa0, 0xb7, 0x0f, 0xf4, 0xd0, 0x09, 0x54, 0xae, 0xf8,
	0x5a, 0x58, 0x86, 0x02, 0x5a, 0x87, 0xc0, 0x70, 0x3a, 0x23, 0xeb, 0x5b, 0x62, 0xeb, 0x44, 0x01,
	0x34, 0x63, 0x72, 0x2d, 0x27, 0x97, 0x8c, 0x4f, 0x56, 0x09, 0x4b, 0xb9, 0x55, 0x53, 0xec, 0xf3,
	0x43, 0x76, 0x44, 0xae, 0xe5, 0x80, 0xf1, 0x4f, 0x5b, 0xcf, 0xa0, 0x84, 0x8f, 0xe3, 0xbd, 0x3b,
	0xea, 0xc2, 0xd1, 0x2e, 0x8b, 0x75, 0xa4, 0xf8, 0xa7, 0x77, 0xf0, 0x83, 0x12, 0xae, 0xe5, 0xa8,
	0x7d, 0x0a, 0xf5, 0x62, 0x0c, 0x0d, 0xa8, 0x45, 0xa3, 0xef, 0xfe, 0x30, 0x0a, 0xcc, 0x12, 0xaa,
	0x41, 0xd9, 0x0f, 0x02, 0x53, 0xdb, 0xaa, 0x38, 0xfc, 0x3a, 0xf4, 0x3f, 0x86, 0xa6, 0x8e, 0x00,
	0x8c, 0x20, 0x1c, 0x86, 0xe3, 0xd0, 0x2c, 0xf7, 0x6b, 0x50, 0x25, 0xdb, 0x46, 0xec, 0x53, 0x68,
	0xee, 0x76, 0x42, 0x70, 0x16, 0x0b, 0x82, 0x1c, 0x30, 0x12, 0x22, 0xd2, 0xb5, 0xcc, 0x37, 0xc2,
	0x2c, 0x26, 0x83, 0x95, 0x8e, 0xf3, 0xb8, 0x9d, 0x42, 0xfd, 0x56, 0xfc, 0x67, 0x0f, 0x3c, 0x30,
	0x84, 0x9c, 0xca, 0x54, 0xa8, 0xe9, 0x37, 0x77, 0x1d, 0x15, 0x69, 0xdc, 0x0b, 0x15, 0xc6, 0xb9,
	0xcd, 0x7e, 0x09, 0x46, 0xa6, 0xa0, 0x3a, 0x54, 0xbf, 0x8d, 0x2e, 0xc2, 0xb1, 0x59, 0x42, 0x06,
	0xe8, 0xe7, 0x9f, 0x4d, 0x6d, 0x5b, 0xfb, 0x99, 0x1f, 0x0d, 0xc3, 0xc0, 0xd4, 0x3b, 0x7d, 0xa8,
	0xae, 0x70, 0xd4, 0x8f, 0xd0, 0x7b, 0x30, 0xb2, 0xda, 0xd1, 0xe3, 0x3c, 0xf9, 0x5f, 0xeb, 0xdd,
	0x7a, 0x72, 0xa0, 0x66, 0x0d, 0x3a, 0xda, 0x89, 0x36, 0x33, 0xd4, 0x8f, 0x78, 0xfb, 0x27, 0x00,
	0x00, 0xff, 0xff, 0xf4, 0xfd, 0x63, 0xe3, 0x8e, 0x03, 0x00, 0x00,
}
